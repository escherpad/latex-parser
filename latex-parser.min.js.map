{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///latex-parser.min.js","webpack:///webpack/bootstrap ca0099b122176d8d2220","webpack:///./src/Utils.ts","webpack:///./src/Text/LaTeX/Base/Syntax.ts","webpack:///./src/Text/LaTeX/Base/Parser.ts","webpack:///./src/main.ts","webpack:///./~/parsimmon/build/parsimmon.browser.min.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","updateProperties","target","values","opt_keys","opt_attributes","arguments","length","undefined","writable","TypeError","key","create","Array","forEach","targetKey","_key","testProperties","opt_skipUndefined","every","_key2","isNumber","x","isString","mustNotBeUndefined","msg","Error","mustBeObject","mustBeString","mustBeArray","a","isArray","constructor","concatMap","arr","f","concat","apply","map","mustBeNumber","mconcat","mappend","_len","args","_key3","reduceRight","snd","pair","isMeasure","isBuiltInMeasure","isCustomMeasure","isMeasureType","measureTypes","type","_Utils","isLaTeXBlock","expression","isMathType","isNameHaving","isMultipleLaTeXHaving","latex","isTextHaving","text","isLaTeXHaving","isArgumentHaving","y","isTeXEmpty","head","tail","protectChar","isTypeHaving","anyOfTypes","some","isLaTeXBlockNoSeq","isTeXRaw","isTeXComm","isTeXEnv","isTeXMath","isTeXLineBreak","isTeXBraces","isTeXComment","typeTeXRaw","typeTeXComm","typeTeXCommS","isTeXCommS","typeTeXEnv","noNewPage","measure","typeTeXBraces","isFixArg","isOptArg","typeTeXComment","e","keys","newFixArg","newOptArg","newSymArg","newParArg","newMOptArg","newMSymArg","newMParArg","newCommandS","newTeXRaw","newTeXMath","newTeXBraces","newTeXComment","newTeXComm","_len2","newTeXEnv","_len3","newTeXMathDol","getPreamble","getBody","matchEnvArg","matchEnv","lookForEnv","matchCommandArg","matchCommand","lookForCommand","protectString","fromStringLaTeX","mempty","typeTeXSeq","mathTypes","_slicedToArray","sliceIterator","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","push","err","pt","mm","cm","in","ex","em","Parentheses","Square","Dollar","newString","charAt","join","commandName","xs","arg","compressEnv","_ref","_ref2","str","env","bind","_toConsumableArray","arr2","from","unsafeUnion","ys","xn","yn","obj","j","k","sort","mergeReplies","result","last","furthest","expected","status","index","manyTillAndMap","manyOf","till","initial","_parsimmon","Parser","input","accum","endCodonFound","_","bigParse","isNotOk","mustBeOk","makeSuccess","manyTill","el","takeAtLeastOneTill","firstChar","makeFailure","strz","char","isSpecialCharacter","specialChars","specialCharsDefault","isNotText","notText","notTextDefault","isUppercaseAlph","isLowercaseAlph","isOk","parse","JSON","stringify","dolMath","command","cmdArgs","cmdArg","optArg","fixArg","endCmd","specialChar","environment","latexParser","latexBlockParser","commandSymbol","mathSymbol","notTextDefaultAndNotClosingBracket","comment","text2","takeTill","defaultParserConf","_Syntax","verbatimEnvironments","predicate","takeWhile","takeTillNewline","regexp","maybeNewline","commentSymbol","string","openingBracket","closingBracket","match","then","spaces","skip","'","(",")",",",".","-","\"","!","^","$","&","#","{","}","%","~","|","/",":",";","=","[","]","\\","`"," ","lazy","alt","anonym","many","beginFound","envName","test","openingBrace","closingBrace","atLeast","eof","seqMap","ignored","argz","res","t","sMath","eMath","_Parser","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","u","r","RegExp","h","v","offset","line","column","slice","g","pop","I","A","w","E","or","b","chain","lastIndexOf","O","source","P","exec","z","B","R","indexOf","L","W","desc","S","split","D","M","tryParse","thru","times","atMost","mark","C","start","end","node","lookahead","notFollowedBy","fallback","F","q","empty","of","ap","G","H","J","K","N","Q","createLanguage","all","any","custom","digit","digits","fail","formatError","isParser","letter","letters","noneOf","oneOf","optWhitespace","regex","sepBy","sepBy1","seq","succeed","whitespace"],"mappings":"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","file":"latex-parser.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"latex-parser\"] = factory();\n\telse\n\t\troot[\"latex-parser\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"latex-parser\"] = factory();\n\telse\n\t\troot[\"latex-parser\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 3);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.updateProperties = updateProperties;\nexports.testProperties = testProperties;\nexports.isNumber = isNumber;\nexports.isString = isString;\nexports.mustNotBeUndefined = mustNotBeUndefined;\nexports.mustBeObject = mustBeObject;\nexports.mustBeString = mustBeString;\nexports.mustBeArray = mustBeArray;\nexports.isArray = isArray;\nexports.concatMap = concatMap;\nfunction updateProperties(target, values, opt_keys) {\n    var opt_attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n        writable: true,\n        enumerable: true,\n        configurable: true\n    };\n\n    if (!(target instanceof Object)) throw new TypeError('\"target\" isn\\'t an Object instance');\n    if (values === undefined) return;\n    if (!(values instanceof Object)) throw new TypeError('\"properties\" isn\\'t an Object instance');\n    if (opt_attributes === undefined) {\n        opt_attributes = { writable: true, enumerable: true, configurable: true };\n    } else if (!(opt_attributes instanceof Object)) {\n        throw new TypeError('\"attributes\" isn\\'t an Object instance');\n    }\n    if (opt_keys === undefined) {\n        for (var key in values) {\n            if (values[key] !== undefined) {\n                Object.defineProperty(target, key, Object.create(opt_attributes, { value: { value: values[key] } }));\n            }\n        }\n    } else if (opt_keys instanceof Array) {\n        opt_keys.forEach(function (key) {\n            if (values[key] !== undefined) {\n                Object.defineProperty(target, key, Object.create(opt_attributes, { value: { value: values[key] } }));\n            }\n        });\n    } else if (opt_keys instanceof Object) {\n        for (var targetKey in opt_keys) {\n            var _key = opt_keys[targetKey];\n            if (values[_key] !== undefined) Object.defineProperty(target, targetKey, Object.create(opt_attributes, { value: { value: values[_key] } }));\n        }\n    } else {\n        throw new TypeError('\"keys\" isn\\'t an Object instance');\n    }\n}\nfunction testProperties(target, values, opt_keys) {\n    var opt_skipUndefined = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    if (!(target instanceof Object)) throw new TypeError('\"target\" isn\\'t an Object instance');\n    if (values === undefined) return true;\n    if (!(values instanceof Object)) throw new TypeError('\"properties\" isn\\'t an Object instance');\n    if (opt_skipUndefined === undefined) opt_skipUndefined = true;\n    if (opt_keys === undefined) {\n        for (var key in values) {\n            if (target[key] !== values[key] && !(values[key] === undefined && opt_skipUndefined)) return false;\n        }\n    } else if (opt_keys instanceof Array) {\n        return opt_keys.every(function (key) {\n            return target[key] === values[key] || values[key] === undefined && opt_skipUndefined;\n        });\n    } else if (opt_keys instanceof Object) {\n        for (var targetKey in opt_keys) {\n            var _key2 = opt_keys[targetKey];\n            if (target[targetKey] !== values[_key2] && !(values[_key2] === undefined && opt_skipUndefined)) return false;\n        }\n    } else {\n        throw new TypeError('\"keys\" isn\\'t an Object instance');\n    }\n    return true;\n}\nvar mustBeNumber = exports.mustBeNumber = function mustBeNumber(a, msg) {\n    if (!isNumber(a)) throw new TypeError(msg ? msg : \"Expected number\");\n    return a;\n};\nfunction isNumber(x) {\n    return typeof x === \"number\";\n}\nfunction isString(x) {\n    return typeof x === \"string\";\n}\nfunction mustNotBeUndefined(x, msg) {\n    if (!x) throw new Error(msg);\n    return x;\n}\nfunction mustBeObject(o, msg) {\n    if (!(o instanceof Object)) throw new TypeError(msg ? msg : \"Expected Object\");\n    return o;\n}\nfunction mustBeString(o, msg) {\n    if (typeof o !== \"string\") throw new TypeError(msg ? msg : \"Expected string\");\n    return o;\n}\nfunction mustBeArray(a, msg) {\n    if (!isArray(a)) throw new TypeError(msg ? msg : \"Expected Array\");\n    return a;\n}\nfunction isArray(x) {\n    return x.constructor === Array;\n}\nvar mconcat = exports.mconcat = function mconcat(mappend) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key3 = 1; _key3 < _len; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n    }\n\n    return args.reduceRight(mappend);\n};\nvar snd = exports.snd = function snd(pair) {\n    return pair[1];\n};\nfunction concatMap(arr, f) {\n    return [].concat.apply([], arr.map(f));\n}\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.newTeXMathDol = exports.getPreamble = exports.getBody = exports.matchEnvArg = exports.matchEnv = exports.lookForEnv = exports.matchCommandArg = exports.matchCommand = exports.lookForCommand = exports.protectString = exports.fromStringLaTeX = exports.mempty = exports.typeTeXCommS = exports.typeTeXComm = exports.typeTeXRaw = exports.typeTeXComment = exports.typeTeXBraces = exports.typeTeXEnv = exports.typeTeXSeq = exports.mathTypes = exports.measureTypes = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.isMeasure = isMeasure;\nexports.isMeasureType = isMeasureType;\nexports.isBuiltInMeasure = isBuiltInMeasure;\nexports.isCustomMeasure = isCustomMeasure;\nexports.isMathType = isMathType;\nexports.isNameHaving = isNameHaving;\nexports.isMultipleLaTeXHaving = isMultipleLaTeXHaving;\nexports.isTextHaving = isTextHaving;\nexports.isLaTeXHaving = isLaTeXHaving;\nexports.isArgumentHaving = isArgumentHaving;\nexports.mappend = mappend;\nexports.protectChar = protectChar;\nexports.isTypeHaving = isTypeHaving;\nexports.isLaTeXBlock = isLaTeXBlock;\nexports.isLaTeXBlockNoSeq = isLaTeXBlockNoSeq;\nexports.isTeXRaw = isTeXRaw;\nexports.isTeXComm = isTeXComm;\nexports.isTeXCommS = isTeXCommS;\nexports.isTeXEnv = isTeXEnv;\nexports.isTeXMath = isTeXMath;\nexports.isTeXLineBreak = isTeXLineBreak;\nexports.isTeXBraces = isTeXBraces;\nexports.isFixArg = isFixArg;\nexports.isOptArg = isOptArg;\nexports.isTeXComment = isTeXComment;\nexports.isTeXEmpty = isTeXEmpty;\nexports.newFixArg = newFixArg;\nexports.newOptArg = newOptArg;\nexports.newSymArg = newSymArg;\nexports.newParArg = newParArg;\nexports.newMOptArg = newMOptArg;\nexports.newMSymArg = newMSymArg;\nexports.newMParArg = newMParArg;\nexports.newCommandS = newCommandS;\nexports.newTeXRaw = newTeXRaw;\nexports.newTeXMath = newTeXMath;\nexports.newTeXBraces = newTeXBraces;\nexports.newTeXComment = newTeXComment;\nexports.newTeXComm = newTeXComm;\nexports.newTeXEnv = newTeXEnv;\n\nvar _Utils = __webpack_require__(0);\n\nfunction isMeasure(x) {\n    return isBuiltInMeasure(x) || isCustomMeasure(x);\n}\nvar measureTypes = exports.measureTypes = {\n    \"pt\": true,\n    \"mm\": true,\n    \"cm\": true,\n    \"in\": true,\n    \"ex\": true,\n    \"em\": true\n};\nfunction isMeasureType(x) {\n    return measureTypes.hasOwnProperty(x);\n}\nfunction isBuiltInMeasure(x) {\n    return isMeasureType(x.type) && (0, _Utils.isNumber)(x.value);\n}\nfunction isCustomMeasure(x) {\n    return isLaTeXBlock(x.expression);\n}\nvar mathTypes = exports.mathTypes = {\n    Parentheses: \"Parentheses\",\n    Square: \"Square\",\n    Dollar: \"Dollar\"\n};\nfunction isMathType(x) {\n    if (x === undefined) return false;else switch (x) {\n        case \"Parentheses\":\n        case \"Square\":\n        case \"Dollar\":\n            return true;\n        default:\n            return false;\n    }\n}\nfunction isNameHaving(x, name) {\n    return x !== undefined && (name === undefined ? typeof x.name === \"string\" : name === x.name);\n}\nfunction isMultipleLaTeXHaving(x) {\n    return x.latex instanceof Array;\n}\nfunction isTextHaving(x) {\n    return x !== undefined && typeof x.text === \"string\";\n}\nfunction isLaTeXHaving(x) {\n    return x !== undefined && isLaTeXBlock(x.latex);\n}\nfunction isArgumentHaving(x) {\n    return x.arguments instanceof Array;\n}\nvar typeTeXSeq = exports.typeTeXSeq = \"TeXSeq\";\nvar typeTeXEnv = exports.typeTeXEnv = \"TeXEnv\";\nvar typeTeXBraces = exports.typeTeXBraces = \"TeXBraces\";\nvar typeTeXComment = exports.typeTeXComment = \"TeXComment\";\nvar typeTeXRaw = exports.typeTeXRaw = \"TeXRaw\";\nvar typeTeXComm = exports.typeTeXComm = \"TeXComm\";\nvar typeTeXCommS = exports.typeTeXCommS = \"TeXCommS\";\nvar mempty = exports.mempty = {};\nfunction mappend(x, y) {\n    if (isTeXEmpty(y)) return x;else if (isTeXEmpty(x)) return y;else return {\n        head: x,\n        tail: y\n    };\n}\nvar fromStringLaTeX = exports.fromStringLaTeX = function fromStringLaTeX(x) {\n    return newTeXRaw(protectString(x));\n};\nvar protectString = exports.protectString = function protectString(s) {\n    var newString = [];\n    for (var i = 0; i < s.length; i++) {\n        newString.push(protectChar(s.charAt(i)));\n    }return newString.join();\n};\nfunction protectChar(c) {\n    switch (c) {\n        case \"#\":\n            return \"\\\\#\";\n        case \"$\":\n            return \"\\\\$\";\n        case \"%\":\n            return \"\\\\%\";\n        case \"^\":\n            return \"\\\\^{}\";\n        case \"&\":\n            return \"\\\\&\";\n        case \"{\":\n            return \"\\\\{\";\n        case \"}\":\n            return \"\\\\}\";\n        case \"~\":\n            return \"\\\\~{}\";\n        case \"\\\\\":\n            return \"\\\\textbackslash{}\";\n        case \"_\":\n            return \"\\\\_{}\";\n        default:\n            return c;\n    }\n}\nvar lookForCommand = exports.lookForCommand = function lookForCommand(commandName, latex) {\n    return matchCommand(function (s) {\n        return s === commandName;\n    }, latex).map(_Utils.snd);\n};\nvar matchCommand = exports.matchCommand = function matchCommand(f, l) {\n    if (isTeXCommS(l)) return f(l.name) ? [[l.name, []]] : [];\n    if (isTeXComm(l)) {\n        var xs = (0, _Utils.concatMap)(l.arguments, function (arg) {\n            return matchCommandArg(f, arg);\n        });\n        if (f(l.name)) {\n            var a = [[l.name, l.arguments]];\n            return a.concat(xs);\n        } else {\n            return xs;\n        }\n    }\n    if (isTeXMath(l) || isTeXBraces(l)) return matchCommand(f, l.latex);\n    return [];\n};\nvar matchCommandArg = exports.matchCommandArg = function matchCommandArg(f, l) {\n    if (isMultipleLaTeXHaving(l)) {\n        var res = [].concat.apply([], (0, _Utils.mustBeArray)(l.latex).map(function (latex) {\n            return matchCommand(f, latex);\n        }));\n        return res;\n    } else {\n        return matchCommand(f, l.latex);\n    }\n};\nvar compressEnv = function compressEnv(_ref) {\n    var _ref2 = _slicedToArray(_ref, 3),\n        ignored = _ref2[0],\n        as = _ref2[1],\n        l = _ref2[2];\n\n    return [as, l];\n};\nvar lookForEnv = exports.lookForEnv = function lookForEnv(s, l) {\n    return matchEnv(function (str) {\n        return str === s;\n    }, l).map(compressEnv);\n};\nvar matchEnv = exports.matchEnv = function matchEnv(f, l) {\n    if (isTeXComm(l)) {\n        var concatMap2 = (0, _Utils.concatMap)(l.arguments, function (a) {\n            return matchEnvArg(f, a);\n        });\n        return concatMap2;\n    } else if (isTeXEnv(l)) {\n        var tail = (0, _Utils.concatMap)(l.arguments, function (a) {\n            return matchEnvArg(f, a);\n        }).concat(matchEnv(f, l.latex));\n        if (f(l.name)) {\n            var head = [[l.name, l.arguments, l.latex]];\n            var concat = head.concat(tail);\n            return concat;\n        } else {\n            return tail;\n        }\n    } else if (isTeXMath(l) || isTeXBraces(l)) return matchEnv(f, l.latex);else {\n        return [];\n    }\n};\nvar matchEnvArg = exports.matchEnvArg = function matchEnvArg(f, l) {\n    if (isMultipleLaTeXHaving(l)) {\n        return (0, _Utils.concatMap)(l.latex, function (latex) {\n            return matchEnv(f, latex);\n        });\n    } else {\n        return matchEnv(f, l.latex);\n    }\n};\nvar getBody = exports.getBody = function getBody(l) {\n    var env = lookForEnv(\"document\", l);\n    return env.length > 0 ? env[0] : undefined;\n};\nvar getPreamble = exports.getPreamble = function getPreamble(l) {\n    if (isTeXEnv(l, \"document\")) return mempty;else return l;\n};\nfunction isTypeHaving(x) {\n    for (var _len = arguments.length, anyOfTypes = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        anyOfTypes[_key - 1] = arguments[_key];\n    }\n\n    return anyOfTypes.length === 0 ? typeof x.type === \"string\" : anyOfTypes.some(function (type) {\n        return x.type === type;\n    });\n}\nfunction isLaTeXBlock(x) {\n    return isLaTeXBlockNoSeq(x);\n}\nfunction isLaTeXBlockNoSeq(x) {\n    return isTeXEmpty(x) || isTeXRaw(x) || isTeXComm(x) || isTeXEnv(x) || isTeXMath(x) || isTeXLineBreak(x) || isTeXBraces(x) || isTeXComment(x);\n}\nfunction isTeXRaw(x) {\n    return x !== undefined && x.type != undefined && isTextHaving(x) && isTypeHaving(x, typeTeXRaw);\n}\nfunction isTeXComm(x) {\n    return isNameHaving(x) && isArgumentHaving(x) && isTypeHaving(x, typeTeXComm, typeTeXCommS);\n}\nfunction isTeXCommS(x) {\n    return isTeXComm(x) && x.arguments.length === 0;\n}\nfunction isTeXEnv(x, name) {\n    return isTypeHaving(x, typeTeXEnv);\n}\nfunction isTeXMath(x) {\n    return isLaTeXHaving(x) && isTypeHaving(x) && isMathType(x.type);\n}\nfunction isTeXLineBreak(x) {\n    return x !== undefined && typeof x.noNewPage === \"boolean\" && (x.measure === undefined || isMeasure(x.measure));\n}\nfunction isTeXBraces(x) {\n    return isLaTeXHaving(x) && isTypeHaving(x, typeTeXBraces);\n}\nfunction isFixArg(x) {\n    return isTypeHaving(x, \"FixArg\");\n}\nfunction isOptArg(x) {\n    return isTypeHaving(x, \"OptArg\");\n}\nfunction isTeXComment(x) {\n    return isTextHaving(x) && isTypeHaving(x, typeTeXComment);\n}\nfunction isTeXEmpty(e) {\n    return e !== undefined && Object.keys(e).length === 0;\n}\nfunction newFixArg(l) {\n    return { type: \"FixArg\", latex: l };\n}\nfunction newOptArg(l) {\n    return l.length === 1 ? { type: \"OptArg\", latex: l[0] } : { type: \"MOptArg\", latex: l };\n}\nfunction newSymArg(l) {\n    return { type: \"SymArg\", latex: l };\n}\nfunction newParArg(l) {\n    return { type: \"ParArg\", latex: l };\n}\nfunction newMOptArg(l) {\n    return { type: \"MOptArg\", latex: l };\n}\nfunction newMSymArg(l) {\n    return { type: \"MSymArg\", latex: l };\n}\nfunction newMParArg(l) {\n    return { type: \"MParArg\", latex: l };\n}\nfunction newCommandS(name) {\n    return {\n        name: name,\n        arguments: [],\n        type: typeTeXCommS\n    };\n}\nfunction newTeXRaw(text) {\n    return {\n        text: text,\n        type: typeTeXRaw\n    };\n}\nfunction newTeXMath(type, latex) {\n    return {\n        latex: latex,\n        type: type\n    };\n}\nfunction newTeXBraces(latex) {\n    return {\n        latex: latex,\n        type: typeTeXBraces\n    };\n}\nvar newTeXMathDol = exports.newTeXMathDol = newTeXMath.bind(undefined, \"Dollar\");\nfunction newTeXComment(text) {\n    return {\n        text: text,\n        type: typeTeXComment\n    };\n}\nfunction newTeXComm(name) {\n    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n    }\n\n    return {\n        name: name,\n        arguments: args,\n        type: typeTeXComm\n    };\n}\nfunction newTeXEnv(name, latex) {\n    for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        args[_key3 - 2] = arguments[_key3];\n    }\n\n    return {\n        name: name,\n        latex: latex,\n        arguments: args,\n        type: typeTeXEnv\n    };\n}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.dolMath = exports.command = exports.cmdArgs = exports.cmdArg = exports.optArg = exports.fixArg = exports.endCmd = exports.specialChar = exports.environment = exports.env = exports.latexParser = exports.latexBlockParser = exports.commandSymbol = exports.mathSymbol = exports.notTextDefaultAndNotClosingBracket = exports.notTextDefault = exports.specialCharsDefault = exports.comment = exports.text2 = exports.text = exports.takeTill = exports.defaultParserConf = undefined;\nexports.isSpecialCharacter = isSpecialCharacter;\nexports.isNotText = isNotText;\nexports.isOk = isOk;\nexports.isNotOk = isNotOk;\nexports.mustBeOk = mustBeOk;\n\nvar _parsimmon = __webpack_require__(4);\n\nvar _Syntax = __webpack_require__(1);\n\nvar _Utils = __webpack_require__(0);\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar defaultParserConf = exports.defaultParserConf = {\n    verbatimEnvironments: [\"verbatim\"]\n};\nvar takeTill = exports.takeTill = function takeTill(predicate) {\n    return (0, _parsimmon.takeWhile)(function (c) {\n        return !predicate(c);\n    });\n};\nvar takeTillNewline = (0, _parsimmon.regexp)(/[^\\n]*/);\nvar maybeNewline = (0, _parsimmon.regexp)(/\\n?/);\nvar whitespace = (0, _parsimmon.regexp)(/\\s*/m);\nvar commentSymbol = (0, _parsimmon.string)(\"%\");\nfunction unsafeUnion(xs, ys) {\n    var xn = xs.length;\n    var yn = ys.length;\n    if (xn === 0) {\n        return ys;\n    } else if (yn === 0) {\n        return xs;\n    }\n    var obj = {};\n    for (var i = 0; i < xn; i++) {\n        obj[xs[i]] = true;\n    }\n    for (var j = 0; j < yn; j++) {\n        obj[ys[j]] = true;\n    }\n    var keys = [];\n    for (var k in obj) {\n        if (obj.hasOwnProperty(k)) {\n            keys.push(k);\n        }\n    }\n    keys.sort();\n    return keys;\n}\nfunction mergeReplies(result, last) {\n    if (!last) {\n        return result;\n    }\n    if (result.furthest > last.furthest) {\n        return result;\n    }\n    var expected = result.furthest === last.furthest ? unsafeUnion(result.expected, last.expected) : last.expected;\n    return {\n        status: result.status,\n        index: result.index,\n        value: result.value,\n        furthest: last.furthest,\n        expected: expected\n    };\n}\nfunction manyTillAndMap(manyOf, till, map, initial) {\n    return (0, _parsimmon.Parser)(function (input, i) {\n        var accum = initial;\n        var j = 0;\n        var result = undefined;\n        while (i < input.length) {\n            var endCodonFound = till._(input, i);\n            if (endCodonFound.status) {\n                i = (0, _Utils.mustBeNumber)(endCodonFound.index);\n                break;\n            }\n            var bigParse = manyOf._(input, i);\n            if (isNotOk(bigParse)) return bigParse;\n            result = (0, _Utils.mustNotBeUndefined)(mergeReplies(bigParse, result));\n            if (isNotOk(result)) {\n                return result;\n            }\n            j++;\n            var value = (0, _Utils.mustNotBeUndefined)(result.value);\n            accum = map(accum, value);\n            i = (0, _Utils.mustBeNumber)(result.index);\n        }\n        var result2 = (0, _parsimmon.makeSuccess)(i, accum);\n        return mustBeOk(mergeReplies(result2, result));\n    });\n}\nfunction manyTill(manyOf, till) {\n    return manyTillAndMap(manyOf, till, function (a, el) {\n        return a.concat([el]);\n    }, []);\n}\nfunction token(parser) {\n    return parser.skip(whitespace);\n}\nfunction word(str) {\n    return (0, _parsimmon.string)(str).thru(token);\n}\nvar lbrace = \"{\";\nvar rbrace = \"}\";\nvar lbracket = \"[\";\nvar rbracket = \"]\";\nvar comma = \",\";\nvar colon = \":\";\nvar openingBracket = (0, _parsimmon.string)(lbracket);\nvar closingBracket = (0, _parsimmon.string)(rbracket);\nvar isClosingbracket = function isClosingbracket(str) {\n    return str === rbracket;\n};\nfunction takeAtLeastOneTill(till) {\n    return (0, _parsimmon.Parser)(function (str, i) {\n        var firstChar = str.charAt(i);\n        if (i >= str.length || till(firstChar)) {\n            return (0, _parsimmon.makeFailure)(i, \"text character\");\n        } else {\n            var strz = [firstChar];\n            i++;\n            var char = str.charAt(i);\n            while (!till(char) && i < str.length) {\n                strz.push(char);\n                i++;\n                char = str.charAt(i);\n            }\n            return (0, _parsimmon.makeSuccess)(i, strz.join(\"\"));\n        }\n    });\n}\nvar text = exports.text = takeAtLeastOneTill(isNotText).map(function (match) {\n    return (0, _Syntax.newTeXRaw)(match);\n});\nvar text2 = exports.text2 = closingBracket.then(takeAtLeastOneTill(isNotText).map(function (match) {\n    return (0, _Syntax.newTeXRaw)(match);\n}));\nvar spaces = (0, _parsimmon.regexp)(/ */).map(_Syntax.newTeXRaw);\nvar comment = exports.comment = commentSymbol.then(takeTillNewline).skip(maybeNewline).map(_Syntax.newTeXComment);\nvar specialCharsDefault = exports.specialCharsDefault = {\n    \"'\": true,\n    \"(\": true,\n    \")\": true,\n    \",\": true,\n    \".\": true,\n    \"-\": true,\n    '\"': true,\n    \"!\": true,\n    \"^\": true,\n    \"$\": true,\n    \"&\": true,\n    \"#\": true,\n    \"{\": true,\n    \"}\": true,\n    \"%\": true,\n    \"~\": true,\n    \"|\": true,\n    \"/\": true,\n    \":\": true,\n    \";\": true,\n    \"=\": true,\n    \"[\": true,\n    \"]\": true,\n    \"\\\\\": true,\n    \"`\": true,\n    \" \": true\n};\nfunction isSpecialCharacter(char, specialChars) {\n    var chars = specialChars === undefined ? specialCharsDefault : specialChars;\n    return chars.hasOwnProperty(char);\n}\nvar notTextDefault = exports.notTextDefault = {\n    \"$\": true,\n    \"%\": true,\n    \"\\\\\": true,\n    \"{\": true,\n    \"]\": true,\n    \"}\": true\n};\nvar notTextDefaultAndNotClosingBracket = exports.notTextDefaultAndNotClosingBracket = {\n    \"$\": true,\n    \"%\": true,\n    \"\\\\\": true,\n    \"{\": true,\n    \"}\": true\n};\nfunction isNotText(char, notText) {\n    var chars = notText === undefined ? notTextDefault : notText;\n    return chars.hasOwnProperty(char);\n}\nvar mathSymbol = exports.mathSymbol = (0, _parsimmon.string)(\"$\");\nvar commandSymbol = exports.commandSymbol = (0, _parsimmon.string)(\"\\\\\");\nvar latexBlockParser = exports.latexBlockParser = (0, _parsimmon.lazy)(function () {\n    return (0, _parsimmon.alt)((0, _parsimmon.alt)(text, dolMath, comment, text2, environment, command));\n});\nvar latexParser = exports.latexParser = latexBlockParser.many();\nvar anonym = (0, _parsimmon.string)(lbrace).then(latexBlockParser.many()).skip((0, _parsimmon.string)(rbrace));\nvar env = exports.env = (0, _parsimmon.Parser)(function (input, i) {\n    var beginFound = (0, _parsimmon.string)(\"\\\\begin\").then((0, _parsimmon.string)(lbrace)).then(spaces).then((0, _parsimmon.regexp)(/[a-zA-Z]+/)).skip(spaces).skip((0, _parsimmon.string)(rbrace))._(input, i);\n    if (isNotOk(beginFound)) return beginFound;\n    i = (0, _Utils.mustBeNumber)(beginFound.index);\n    var envName = beginFound.value;\n    return manyTill(latexBlockParser, (0, _parsimmon.string)(\"\\\\end\").then((0, _parsimmon.string)(lbrace)).then(spaces).then((0, _parsimmon.string)(envName)).then(spaces).then((0, _parsimmon.string)(rbrace))).map(function (latex) {\n        return (0, _Syntax.newTeXEnv)(envName, latex);\n    })._(input, i);\n});\nvar environment = exports.environment = (0, _parsimmon.alt)(anonym, env);\nvar specialChar = exports.specialChar = (0, _parsimmon.test)(isSpecialCharacter);\nfunction isUppercaseAlph(c) {\n    return c >= \"A\" && c <= \"Z\";\n}\nfunction isLowercaseAlph(c) {\n    return c >= \"a\" && c <= \"z\";\n}\nvar endCmd = exports.endCmd = function endCmd(c) {\n    return !isLowercaseAlph(c) && !isUppercaseAlph(c);\n};\nvar openingBrace = (0, _parsimmon.string)(\"{\");\nvar closingBrace = (0, _parsimmon.string)(\"}\");\nvar isClosingBrace = function isClosingBrace(str) {\n    return str === \"}\";\n};\nvar fixArg = exports.fixArg = openingBrace.then(manyTill(latexBlockParser, closingBrace)).map(_Syntax.newFixArg);\nvar optArg = exports.optArg = openingBracket.then(manyTill(latexBlockParser, closingBracket)).map(_Syntax.newOptArg);\nvar cmdArg = exports.cmdArg = (0, _parsimmon.alt)(fixArg, optArg);\nvar cmdArgs = exports.cmdArgs = (0, _parsimmon.alt)((0, _parsimmon.string)(\"{}\").map(function () {\n    return [];\n}), cmdArg.map(function (s) {\n    return s;\n}).atLeast(0)).map(function (e) {\n    return e;\n});\nvar command = exports.command = (0, _parsimmon.alt)(commandSymbol.then(_parsimmon.eof).map(function () {\n    return {};\n}), (0, _parsimmon.seqMap)(commandSymbol, (0, _parsimmon.alt)(specialChar, takeTill(endCmd)), cmdArgs, function (ignored, name, argz) {\n    return argz !== undefined ? _Syntax.newTeXComm.apply(undefined, [name].concat(_toConsumableArray(argz))) : (0, _Syntax.newTeXComm)(name);\n})).map(function (res) {\n    return res;\n});\nvar dolMath = exports.dolMath = math(\"Dollar\");\nfunction math(t) {\n    var sMath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"$\";\n    var eMath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"$\";\n\n    return (0, _parsimmon.string)(sMath).then(latexBlockParser.many()).skip((0, _parsimmon.string)(eMath)).map(function (str) {\n        return (0, _Syntax.newTeXMath)(t, str);\n    });\n}\nfunction isOk(parse) {\n    return parse !== undefined && parse.status === true;\n}\nfunction isNotOk(parse) {\n    return parse !== undefined && parse.status === false;\n}\nfunction mustBeOk(parse) {\n    if (!isOk(parse)) throw new Error(\"Expected parse to be success: \" + JSON.stringify(parse));\n    return parse;\n}\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Utils = __webpack_require__(0);\n\nObject.keys(_Utils).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _Utils[key];\n    }\n  });\n});\n\nvar _Syntax = __webpack_require__(1);\n\nObject.keys(_Syntax).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _Syntax[key];\n    }\n  });\n});\n\nvar _Parser = __webpack_require__(2);\n\nObject.keys(_Parser).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _Parser[key];\n    }\n  });\n});\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(n,t){if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))}else if(typeof module===\"object\"&&module.exports){module.exports=t()}else{n.Parsimmon=t()}})(this,function(){\"use strict\";function n(t){if(!(this instanceof n)){return new n(t)}this._=t}function t(t){return t instanceof n}var r=n.prototype;function e(n,t){return{status:true,index:n,value:t,furthest:-1,expected:[]}}function u(n,t){return{status:false,index:-1,value:null,furthest:n,expected:[t]}}function a(n,t){if(!t){return n}if(n.furthest>t.furthest){return n}var r=n.furthest===t.furthest?i(n.expected,t.expected):t.expected;return{status:n.status,index:n.index,value:n.value,furthest:t.furthest,expected:r}}function i(n,t){var r=n.length;var e=t.length;if(r===0){return t}else if(e===0){return n}var u={};for(var a=0;a<r;a++){u[n[a]]=true}for(var i=0;i<e;i++){u[t[i]]=true}var o=[];for(var f in u){if(u.hasOwnProperty(f)){o.push(f)}}o.sort();return o}function o(n){if(!t(n)){throw new Error(\"not a parser: \"+n)}}function f(n){if(typeof n!==\"number\"){throw new Error(\"not a number: \"+n)}}function s(n){if(!(n instanceof RegExp)){throw new Error(\"not a regexp: \"+n)}var t=k(n);for(var r=0;r<t.length;r++){var e=t.charAt(r);if(e!=\"i\"&&e!=\"m\"&&e!=\"u\"){throw new Error('unsupported regexp flag \"'+e+'\": '+n)}}}function c(n){if(typeof n!==\"function\"){throw new Error(\"not a function: \"+n)}}function l(n){if(typeof n!==\"string\"){throw new Error(\"not a string: \"+n)}}function h(n){if(n.length===1){return n[0]}return\"one of \"+n.join(\", \")}function v(n,t){var r=t.index;var e=r.offset;if(e===n.length){return\", got the end of the input\"}var u=e>0?\"'...\":\"'\";var a=n.length-e>12?\"...'\":\"'\";return\" at line \"+r.line+\" column \"+r.column+\", got \"+u+n.slice(e,e+12)+a}function p(n,t){return\"expected \"+h(t.expected)+v(n,t)}r.parse=function(n){if(typeof n!==\"string\"){throw new Error(\".parse must be called with a string as its argument\")}var t=this.skip(M)._(n,0);return t.status?{status:true,value:t.value}:{status:false,index:S(n,t.furthest),expected:t.expected}};r.tryParse=function(n){var t=this.parse(n);if(t.status){return t.value}else{var r=p(n,t);var e=new Error(r);e.type=\"ParsimmonError\";e.result=t;throw e}};function d(){var t=[].slice.call(arguments);var r=t.length;for(var u=0;u<r;u+=1){o(t[u])}return n(function(n,u){var i;var o=new Array(r);for(var f=0;f<r;f+=1){i=a(t[f]._(n,u),i);if(!i.status){return i}o[f]=i.value;u=i.index}return a(e(u,o),i)})}function g(){var n=[].slice.call(arguments);if(n.length===0){throw new Error(\"seqMap needs at least one argument\")}var t=n.pop();c(t);return d.apply(null,n).map(function(n){return t.apply(null,n)})}function m(n){var t={};for(var r in n){if({}.hasOwnProperty.call(n,r)){(function(r){var e=function(){return n[r](t)};t[r]=I(e)})(r)}}return t}function y(t){return n(t(e,u))}function x(){var t=[].slice.call(arguments);var r=t.length;if(r===0){return A(\"zero alternates\")}for(var e=0;e<r;e+=1){o(t[e])}return n(function(n,r){var e;for(var u=0;u<t.length;u+=1){e=a(t[u]._(n,r),e);if(e.status)return e}return e})}function w(n,t){return E(n,t).or(b([]))}function E(n,t){o(n);o(t);var r=t.then(n).many();return n.chain(function(n){return r.map(function(t){return[n].concat(t)})})}r.or=function(n){return x(this,n)};r.thru=function(n){return n(this)};r.then=function(n){if(typeof n===\"function\"){throw new Error(\"chaining features of .then are no longer supported, use .chain instead\")}o(n);return d(this,n).map(function(n){return n[1]})};r.many=function(){var t=this;return n(function(n,r){var u=[];var i=undefined;for(;;){i=a(t._(n,r),i);if(i.status){r=i.index;u.push(i.value)}else{return a(e(r,u),i)}}})};r.times=function(t,r){var u=this;if(arguments.length<2){r=t}f(t);f(r);return n(function(n,i){var o=[];var f=undefined;var s=undefined;for(var c=0;c<t;c+=1){f=u._(n,i);s=a(f,s);if(f.status){i=f.index;o.push(f.value)}else{return s}}for(;c<r;c+=1){f=u._(n,i);s=a(f,s);if(f.status){i=f.index;o.push(f.value)}else{break}}return a(e(i,o),s)})};r.result=function(n){return this.map(function(){return n})};r.atMost=function(n){return this.times(0,n)};r.atLeast=function(n){return g(this.times(n),this.many(),function(n,t){return n.concat(t)})};r.map=function(t){c(t);var r=this;return n(function(n,u){var i=r._(n,u);if(!i.status){return i}return a(e(i.index,t(i.value)),i)})};r[\"fantasy-land/map\"]=r.map;r.skip=function(n){return d(this,n).map(function(n){return n[0]})};r.mark=function(){return g(C,this,C,function(n,t,r){return{start:n,value:t,end:r}})};r.node=function(n){return g(C,this,C,function(t,r,e){return{name:n,value:r,start:t,end:e}})};r.lookahead=function(n){return this.skip(z(n))};r.notFollowedBy=function(n){return this.skip(B(n))};r.desc=function(t){var r=this;return n(function(n,e){var u=r._(n,e);if(!u.status){u.expected=[t]}return u})};r.fallback=function(n){return this.or(b(n))};function _(t){l(t);var r=\"'\"+t+\"'\";return n(function(n,a){var i=a+t.length;var o=n.slice(a,i);if(o===t){return e(i,o)}else{return u(a,r)}})}function k(n){var t=\"\"+n;return t.slice(t.lastIndexOf(\"/\")+1)}function O(n){return RegExp(\"^(?:\"+n.source+\")\",k(n))}function P(t,r){s(t);if(arguments.length>=2){f(r)}else{r=0}var a=O(t);var i=\"\"+t;return n(function(n,t){var o=a.exec(n.slice(t));if(o){var f=o[0];var s=o[r];if(s!=null){return e(t+f.length,s)}}return u(t,i)})}function b(t){return n(function(n,r){return e(r,t)})}function A(t){return n(function(n,r){return u(r,t)})}function z(r){if(t(r)){return n(function(n,t){var e=r._(n,t);e.index=t;e.value=\"\";return e})}else if(typeof r===\"string\"){return z(_(r))}else if(r instanceof RegExp){return z(P(r))}throw new Error(\"not a string, regexp, or parser: \"+r)}function B(t){o(t);return n(function(n,r){var a=t._(n,r);var i=n.slice(r,a.index);return a.status?u(r,'not \"'+i+'\"'):e(r,null)})}var F=n(function(n,t){if(t>=n.length){return u(t,\"any character\")}return e(t+1,n.charAt(t))});var q=n(function(n,t){return e(n.length,n.slice(t))});var M=n(function(n,t){if(t<n.length){return u(t,\"EOF\")}return e(t,null)});function R(t){c(t);return n(function(n,r){var a=n.charAt(r);if(r<n.length&&t(a)){return e(r+1,a)}else{return u(r,\"a character matching \"+t)}})}function j(n){return R(function(t){return n.indexOf(t)>=0})}function L(n){return R(function(t){return n.indexOf(t)<0})}function W(t){c(t);return n(function(n,r){var u=r;while(u<n.length&&t(n.charAt(u))){u++}return e(u,n.slice(r,u))})}function I(t,r){if(arguments.length<2){r=t;t=undefined}var e=n(function(n,t){e._=r()._;return e._(n,t)});if(t){return e.desc(t)}else{return e}}function S(n,t){var r=n.slice(0,t).split(\"\\n\");var e=r.length;var u=r[r.length-1].length+1;return{offset:t,line:e,column:u}}var C=n(function(n,t){return e(t,S(n,t))});function D(){return A(\"fantasy-land/empty\")}r.concat=r.or;r[\"fantasy-land/concat\"]=r.concat;r.empty=D;r[\"fantasy-land/empty\"]=r.empty;r.of=b;r[\"fantasy-land/of\"]=r.of;r.ap=function(n){return g(n,this,function(n,t){return n(t)})};r[\"fantasy-land/ap\"]=r.ap;r.chain=function(t){var r=this;return n(function(n,e){var u=r._(n,e);if(!u.status){return u}var i=t(u.value);return a(i._(n,u.index),u)})};r[\"fantasy-land/chain\"]=r.chain;var G=P(/[0-9]/).desc(\"a digit\");var H=P(/[0-9]*/).desc(\"optional digits\");var J=P(/[a-z]/i).desc(\"a letter\");var K=P(/[a-z]*/i).desc(\"optional letters\");var N=P(/\\s*/).desc(\"optional whitespace\");var Q=P(/\\s+/).desc(\"whitespace\");n.createLanguage=m;n.all=q;n.alt=x;n.any=F;n.custom=y;n.digit=G;n.digits=H;n.eof=M;n.fail=A;n.formatError=p;n.index=C;n.isParser=t;n.lazy=I;n.letter=J;n.letters=K;n.lookahead=z;n.notFollowedBy=B;n.makeFailure=u;n.makeSuccess=e;n.noneOf=L;n.oneOf=j;n.optWhitespace=N;n.Parser=n;n.regex=P;n.regexp=P;n.sepBy=w;n.sepBy1=E;n.seq=d;n.seqMap=g;n.string=_;n.succeed=b;n.takeWhile=W;n.test=R;n.whitespace=Q;n.empty=D;n[\"fantasy-land/empty\"]=D;n.of=b;n[\"fantasy-land/of\"]=b;return n});\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// latex-parser.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ca0099b122176d8d2220","/**\n * @fileoverview General JavaScript utils\n * This file is a part of TeXnous project.\n *\n * @copyright TeXnous project team (http://texnous.org) 2016\n * @license LGPL-3.0\n *\n * This library is free software; you can redistribute it and/or modify it under the terms of the\n * GNU Lesser General Public License as published by the Free Software Foundation; either version 3\n * of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License along with this library;\n * if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n * 02111-1307, USA.\n */\n\nexport type StringMap = { [s: string]: string };\n\nexport type TargetObject = any;\nexport type ValuesObject = any;\n\nexport type OptKeys = StringMap | string[];\n\nexport interface OptAttributes {\n    writable: boolean;\n    enumerable: boolean;\n    configurable: boolean;\n}\n/**\n * Update object properties by property values\n * @param {!Object} target the object to copy properties to\n * @param {!Object} values the object with property values (undefined values will be skipped)\n * @param {(!Object.<string,string>|!Array.<string>)=} opt_keys\n *        list of keys or map of the target keys to the property names, all the enumerable\n *        properties will be used if undefined\n * @param {{writable:boolean,enumerable:boolean,configurable:boolean}=} opt_attributes\n *        property attributes, { writable: true, enumerable: true, configurable: true } by default\n */\nexport function updateProperties(target: TargetObject,\n                                 values: ValuesObject,\n                                 opt_keys?: OptKeys,\n                                 opt_attributes: OptAttributes = {\n                                     writable: true,\n                                     enumerable: true,\n                                     configurable: true\n                                 }) {\n    if (!(target instanceof Object)) throw new TypeError('\"target\" isn\\'t an Object instance');\n    if (values === undefined) return; // do noting is the sources is undefined\n    if (!(values instanceof Object)) throw new TypeError('\"properties\" isn\\'t an Object instance');\n    if (opt_attributes === undefined) {\n        opt_attributes = {writable: true, enumerable: true, configurable: true};\n    } else if (!(opt_attributes instanceof Object)) {\n        throw new TypeError('\"attributes\" isn\\'t an Object instance');\n    }\n    if (opt_keys === undefined) { // if the key map isn't defined\n        for (const key in values) { // for all the enumerable properties\n            //noinspection JSUnfilteredForInLoop\n            if (values[key] !== undefined) {\n                //noinspection JSUnfilteredForInLoop\n                Object.defineProperty(target, key, // update the property\n                    // using the defined value\n                    Object.create(opt_attributes, {value: {value: values[key]}})\n                );\n            }\n        }\n    } else if (opt_keys instanceof Array) { // if the list of the keys is defined\n        opt_keys.forEach(key => {\n            if (values[key] !== undefined) {\n                Object.defineProperty(target, key, // update the property\n                    Object.create(opt_attributes, {value: {value: values[key]}}) // using the defined value\n                );\n            }\n        });\n    } else if (opt_keys instanceof Object) { // if the map of the keys is defined\n        for (const targetKey in opt_keys) { // for all the target keys\n            //noinspection JSUnfilteredForInLoop\n            const key = opt_keys[targetKey]; // the sources key\n            if (values[key] !== undefined)\n            //noinspection JSUnfilteredForInLoop\n                Object.defineProperty(target, targetKey, // update the property\n                    // using the defined value\n                    Object.create(opt_attributes, {value: {value: values[key]}})\n                );\n        }\n    } else { // if \"keys\" has unsupported value\n        throw new TypeError('\"keys\" isn\\'t an Object instance');\n    }\n}\n\n\n/**\n * Test object properties with property values (strict comparing is used)\n * @param {!Object} target the object with properties to test\n * @param {?Object} values the object with property values (undefined values will be skipped)\n * @param {?(Object.<string,string>|Array.<string>)} opt_keys\n *        list of keys or map of the target keys to the property names, all the enumerable\n *        properties will be used if undefined\n * @param {boolean=true} opt_skipUndefined true to skip keys with undefined values, false otherwise\n * @return {boolean} true if all the defined properties are the same false otherwise\n */\nexport function testProperties(target: TargetObject,\n                               values?: ValuesObject,\n                               opt_keys?: OptKeys,\n                               opt_skipUndefined = true) {\n    if (!(target instanceof Object)) throw new TypeError('\"target\" isn\\'t an Object instance');\n    if (values === undefined) return true; // do noting is the sources is undefined\n    if (!(values instanceof Object)) throw new TypeError('\"properties\" isn\\'t an Object instance');\n    if (opt_skipUndefined === undefined) opt_skipUndefined = true; // skip undefined by default\n\n    if (opt_keys === undefined) { // if the key map isn't defined\n        for (const key in values) { // for all the enumerable properties\n            //noinspection JSUnfilteredForInLoop // TODO what to do?\n            if (\n                target[key] !== values[key]\n                && !(values[key] === undefined && opt_skipUndefined)\n            )\n                return false; // false if any value is different\n        }\n    } else if (opt_keys instanceof Array) { // if the list of the keys is defined\n        return opt_keys.every(key => {\n            return target[key] === values[key] || (values[key] === undefined && opt_skipUndefined);\n        });\n    } else if (opt_keys instanceof Object) { // if the map of the keys is defined\n        for (const targetKey in opt_keys) { // for all the target keys\n            const key = opt_keys[targetKey]; // the sources key\n            if (target[targetKey] !== values[key] && !(values[key] === undefined && opt_skipUndefined))\n                return false; // false if any value is different\n        }\n    } else { // if \"keys\" has unsupported value\n        throw new TypeError('\"keys\" isn\\'t an Object instance');\n    }\n    return true; // return true if all the defined properties are the same\n}\n\nexport const mustBeNumber = (a: any, msg?: string): number => {\n    if (!(isNumber(a)))\n        throw new TypeError(msg ? msg : \"Expected number\");\n    return a;\n};\n\nexport function isNumber(x: any): x is number {\n    return typeof x === \"number\";\n}\n\nexport function isString(x: any): x is string {\n    return typeof x === \"string\";\n}\n\nexport function mustNotBeUndefined<T>(x?: T, msg?: string): T {\n    if (!x) throw new Error(msg);\n    return x;\n}\n\n// @Deprecated\nexport function mustBeObject(o: any, msg?: string) {\n    if (!(o instanceof Object))\n        throw new TypeError(msg ? msg : \"Expected Object\");\n    return o;\n}\n\nexport function mustBeString(o: any, msg?: string): string {\n    if (typeof o !== \"string\")\n        throw new TypeError(msg ? msg : \"Expected string\");\n    return o;\n}\n\nexport function mustBeArray(a: any, msg?: string): any[] {\n    if (!(isArray(a)))\n        throw new TypeError(msg ? msg : \"Expected Array\");\n    return a;\n}\n\n\n//noinspection JSUnusedGlobalSymbols\nexport function isArray(x: any): x is any[] {\n    return x.constructor === Array;\n}\n\nexport const mconcat = <T>(mappend: (x: T, y: T) => T, ...args: T[]) => args.reduceRight(mappend);\n\nexport const snd = <T, U>(pair: [T, U]) => pair[1];\n\n\nexport function concatMap<T, U>(arr: T[], f: (t: T) => U[]): U[] {\n    return [].concat.apply([], arr.map(f));\n}\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/Utils.ts","/** LaTeX syntax description in the definition of the 'LaTeX' datatype.\n If you want to add new commands or environments not defined in\n the library, import this module and use 'LaTeX' data constructors.\n module Text.LaTeX.Base.Syntax\n */\n/**\n ( -- * @LaTeX@ datatype\n Measure (..)\n , MathType (..)\n , LaTeX (..)\n , TeXArg (..)\n , (<>)\n\n -- * Escaping reserved characters\n , protectString\n , protectText\n\n -- * Syntax analysis\n , matchCommand\n , lookForCommand\n , matchEnv\n , lookForEnv\n , texmap\n , texmapM\n\n -- ** Utils\n , getBody\n , getPreamble\n ) where\n\n import Data.Text (Text,pack)\n import qualified Data.Text\n import Data.Monoid\n #if MIN_VERSION_base(4,9,0)\n import qualified Data.Semigroup as Semigroup\n #endif\n import Data.String\n import Control.Applicative\n import Control.Monad (replicateM)\n import Data.Functor.Identity (runIdentity)\n import Data.Data (Data)\n import Data.Typeable\n import GHC.Generics (Generic)\n import Test.QuickCheck\n */\n/**\n Measure units defined in LaTeX. Use 'CustomMeasure' to use commands like 'textwidth'.\n\n For instance:\n\n > rule Nothing (CustomMeasure linewidth) (Pt 2)\n\n This will create a blac box (see 'rule') as wide as the text and two points tall.\n */\nimport {concatMap, isNumber, mustBeArray, snd} from \"../../../Utils\";\n\nexport type Measure = BuiltInMeasure | CustomMeasure;\n// deriving (\n// Data\n// Eq\n// Generic,\n// Show,\n// Typeable\n\nexport function isMeasure(x: any): x is Measure {\n    return isBuiltInMeasure(x) || isCustomMeasure(x);\n}\n\nexport const measureTypes = {\n    \"pt\": true,                    // A point is 1/72.27 inch, that means about 0.0138 inch or 0.3515 mm.\n    \"mm\": true,                    // Millimeter.\n    \"cm\": true,                    // Centimeter.\n    \"in\": true,                    // Inch.\n    \"ex\": true,                    // The height of an \\\"x\\\" in the current font.\n    \"em\": true,                    // The width of an \\\"M\\\" in the current font.\n};\n\nexport type MeasureType = keyof typeof measureTypes;\n\nexport function isMeasureType(x: any): x is MeasureType {\n    return measureTypes.hasOwnProperty(x);\n}\n\nexport interface BuiltInMeasure {\n    type: MeasureType;\n    value: number;\n}\n\nexport function isBuiltInMeasure(x: any): x is BuiltInMeasure {\n    return isMeasureType(x.type) && isNumber(x.value);\n}\n\n/**\n * You can introduce a 'LaTeX' expression as a measure.\n */\nexport interface CustomMeasure {\n    expression: LaTeX;\n}\n\nexport function isCustomMeasure(x: any): x is CustomMeasure {\n    return isLaTeXBlock(x.expression);\n}\n\n/** Different types of syntax for mathematical expressions.*/\nexport const mathTypes = {\n    Parentheses: \"Parentheses\",\n    Square: \"Square\",\n    Dollar: \"Dollar\"\n};\nexport type MathType = keyof typeof mathTypes;\n\n// deriving (Data, Eq, Generic, Show, Typeable)\nexport function isMathType(x: any): x is MathType {\n    if (x === undefined)\n        return false;\n    else switch (x) {\n        case \"Parentheses\":\n        case \"Square\":\n        case \"Dollar\":\n            return true;\n        default:\n            return false;\n    }\n}\n\nexport interface NameHaving {\n    name: string;\n}\n\nexport function isNameHaving(x: any, name?: string): x is NameHaving {\n    return x !== undefined && (name === undefined\n                ? typeof x.name === \"string\"\n                : name === x.name\n        );\n}\n\nexport interface MultipleLaTeXHaving {\n    latex: LaTeX[];\n}\n\nexport function isMultipleLaTeXHaving(x: any): x is MultipleLaTeXHaving {\n    return x.latex instanceof Array;\n}\n\nexport interface TextHaving {\n    text: string;\n}\n\nexport function isTextHaving(x: any): x is TextHaving {\n    return x !== undefined && typeof x.text === \"string\";\n}\n\n\nexport interface LaTeXHaving {\n    latex: LaTeX;\n}\n\n\nexport function isLaTeXHaving(x: any): x is LaTeXHaving {\n    return x !== undefined && isLaTeXBlock(x.latex);\n}\n\nexport interface MathTypeHaving {\n    type: MathType;\n}\n\nexport interface ArgumentHaving {\n    arguments: TeXArg[];\n}\n\nexport function isArgumentHaving(x: any): x is ArgumentHaving {\n    return x.arguments instanceof Array;\n}\n\n\n/**\n * Types of @LaTeX@ blocks.\n */\nexport type LaTeX = // TeXSeq |\n    LaTeXNoSeq;\n\nexport type LaTeXNoSeq = TeXRaw |\n    TeXComm |\n    TeXEnv |\n    TeXMath |\n    TeXLineBreak |\n    TeXBraces |\n    TeXComment |\n    TeXEmpty;\n\n\n// deriving (Data, Eq, Generic, Show, Typeable)\n\nexport interface TypeHaving {\n    type: string;\n}\n\nexport type TypeTeXSeq = \"TeXSeq\";\nexport const typeTeXSeq: TypeTeXSeq = \"TeXSeq\"; //noinspection JSUnusedGlobalSymbols\nexport interface TypeHavingTeXSeq extends TypeHaving {\n    type: TypeTeXSeq;\n}\n\nexport type TypeTeXEnv = \"TeXEnv\";\nexport const typeTeXEnv: TypeTeXEnv = \"TeXEnv\";\nexport interface TypeHavingTeXEnv extends TypeHaving {\n    type: TypeTeXEnv;\n}\n\nexport type TypeTeXBraces = \"TeXBraces\";\nexport const typeTeXBraces: TypeTeXBraces = \"TeXBraces\";\nexport interface TypeHavingTeXBraces extends TypeHaving {\n    type: TypeTeXBraces;\n}\n\nexport type TypeTeXComment = \"TeXComment\";\nexport const typeTeXComment: TypeTeXComment = \"TeXComment\";\nexport interface TypeHavingTeXComment extends TypeHaving {\n    type: TypeTeXComment;\n}\n\nexport type TypeTeXRaw = \"TeXRaw\";\nexport const typeTeXRaw: TypeTeXRaw = \"TeXRaw\";\nexport interface TypeHavingTeXRaw extends TypeHaving {\n    type: TypeTeXRaw;\n}\n\nexport type TypeTeXComm = \"TeXComm\" | TypeTeXCommS;\nexport const typeTeXComm: TypeTeXComm = \"TeXComm\";\nexport interface TypeHavingTeXComm extends TypeHaving {\n    type: TypeTeXComm;\n}\n\nexport type TypeTeXCommS = \"TeXCommS\";\nexport const typeTeXCommS: TypeTeXCommS = \"TeXCommS\"; //noinspection JSUnusedGlobalSymbols\nexport interface TypeHavingTeXCommS extends TypeHaving {\n    type: TypeTeXCommS;\n}\n\nexport type TeXRaw = TextHaving & TypeHavingTeXRaw; // Raw text.\nexport type TeXComment = TextHaving & TypeHavingTeXComment; // Comments.\nexport type TeXComm = NameHaving & ArgumentHaving & TypeHavingTeXComm;\nexport type TeXEnv = MultipleLaTeXHaving & NameHaving & ArgumentHaving & TypeHavingTeXEnv;\nexport type TeXMath = LaTeXHaving & MathTypeHaving; // Mathematical expressions.\nexport type TeXBraces = LaTeXHaving & TypeHavingTeXBraces;\n\n/**\n An expression between braces.\n Line break command.\n */\nexport interface TeXLineBreak {\n    measure?: Measure;\n    noNewPage: boolean;\n}\n\n// /** Sequencing of 'LaTeX' expressions.*/\n// export interface TeXSeq {\n//     head: LaTeX;\n//     tail: LaTeX;\n//     type: TypeTeXSeq;\n// }\n\n/**\n An empty block.\n /Neutral element/ of '<>'.\n */\nexport interface TeXEmpty {\n}\n\n/**\n * When rendering, no space or @{}@ will be added at\n * the end.\n */\nexport interface TeXCommS extends TeXComm {\n    // Must be empty, but can't express it in the type :(\n    // arguments: [];\n    type: TypeTeXCommS;\n}\n\n\n// An argument for a 'LaTeX' command or environment.\nexport type TeXArg = FixArg |\n    OptArg |\n    MOptArg |\n    SymArg |\n    MSymArg |\n    ParArg |\n    MParArg;\n\n\n// deriving (Data, Eq, Generic, Show, Typeable)\n\n\nexport type FixArg = MultipleLaTeXHaving & TypeHavingFixArg; // Fixed argument.\n\nexport type OptArg = LaTeXHaving & TypeHavingOptArg; // Optional argument.\nexport type SymArg = LaTeXHaving & TypeHavingSymArg; // An argument enclosed between @\\<@ and @\\>@.\nexport type ParArg = LaTeXHaving & TypeHavingParArg; // An argument enclosed between @(@ and @)@.\nexport type MOptArg = MultipleLaTeXHaving & TypeHavingMOptArg; // Multiple optional argument.\nexport type MSymArg = MultipleLaTeXHaving & TypeHavingMSymArg; // Version of 'SymArg' with multiple options.\nexport type MParArg = MultipleLaTeXHaving & TypeHavingMParArg; // Version of 'ParArg' with multiple options.\n\nexport interface TypeHavingFixArg extends TypeHaving {type: \"FixArg\";\n}\nexport interface TypeHavingOptArg extends TypeHaving {type: \"OptArg\";\n}\nexport interface TypeHavingMOptArg extends TypeHaving {type: \"MOptArg\";\n}\nexport interface TypeHavingSymArg extends TypeHaving {type: \"SymArg\";\n}\nexport interface TypeHavingMSymArg extends TypeHaving {type: \"MSymArg\";\n}\nexport interface TypeHavingParArg extends TypeHaving {type: \"ParArg\";\n}\nexport interface TypeHavingMParArg extends TypeHaving {type: \"MParArg\";\n}\n\n//\n// Monoid instance for 'LaTeX'.\n//\n\nexport const mempty: TeXEmpty = {};\n\n/** Method 'mappend' is strict in both arguments (except in the case when the first argument is 'TeXEmpty').*/\nexport function mappend(x: LaTeX, y: LaTeX): LaTeX {\n    if (isTeXEmpty(y))\n        return x;\n    else if (isTeXEmpty(x))\n        return y;\n    // else if (isTeXSeq(x))\n    //     return {\n    //         head: x.head,\n    //         tail: mappend(x.tail, y)\n    //     };\n    else\n        return {\n            head: x,\n            tail: y\n        };\n}\n\n\n/** Method 'fromString' escapes LaTeX reserved characters using 'protectString'.*/\nexport const fromStringLaTeX = (x: string) => newTeXRaw(protectString(x));\n\n/** Escape LaTeX reserved characters in a 'String'.*/\nexport const protectString = (s: string) => {\n    const newString = [];\n    for (let i = 0; i < s.length; i++)\n        newString.push(protectChar(s.charAt(i)));\n    return newString.join();\n};\n\n// -- | Escape LaTeX reserved characters in a 'Text'.\n//     protectText :: Text -> Text\n// protectText = Data.Text.concatMap (fromString . protectChar)\n\nexport function protectChar(c: string): string {\n    switch (c) {\n        case \"#\":\n            return \"\\\\#\";\n        case \"$\":\n            return \"\\\\$\";\n        case \"%\":\n            return \"\\\\%\";\n        case \"^\":\n            return \"\\\\^{}\";\n        case \"&\":\n            return \"\\\\&\";\n        case \"{\":\n            return \"\\\\{\";\n        case \"}\":\n            return \"\\\\}\";\n        case \"~\":\n            return \"\\\\~{}\";\n        case \"\\\\\":\n            return \"\\\\textbackslash{}\";\n        case \"_\":\n            return \"\\\\_{}\";\n        default:\n            return c;\n    }\n}\n\n\n//\n// Syntax analysis\n//\n\n\n/** Look into a 'LaTeX' syntax tree to find any call to the command with\n the given name. It returns a list of arguments with which this command\n is called.\n\n > lookForCommand = (fmap snd .) . matchCommand . (==)\n\n If the returned list is empty, the command was not found. However,\n if the list contains empty lists, those are callings to the command\n with no arguments.\n\n For example\n\n > lookForCommand \"author\" l\n\n would look for the argument passed to the @\\\\author@ command in @l@.\n */\nexport const lookForCommand = (commandName: string, latex: LaTeX): TeXArg[][] =>\n    matchCommand(s => s === commandName, latex).map(snd);\n\n/** Traverse a 'LaTeX' syntax tree and returns the commands (see 'TeXComm' and\n 'TeXCommS') that matches the condition and their arguments in each call.*/\nexport const matchCommand = (f: ((s: string) => boolean), l: LaTeX): [string, TeXArg[]][] => {\n    // if (isTeXSeq(l))\n    //     return (matchCommand(f, l.head)).concat(matchCommand(f, l.tail));\n\n    if (isTeXCommS(l))\n        return f(l.name) ? [[l.name, []]] : [];\n\n    if (isTeXComm(l)) {\n        const xs: [string, TeXArg[]][] = concatMap(l.arguments, arg => matchCommandArg(f, arg));\n        if (f(l.name)) {\n            const a: [string, TeXArg[]][] = [[l.name, l.arguments]];\n            return a.concat(xs);\n        } else {\n            return xs;\n        }\n    }\n\n    if (isTeXMath(l) || isTeXBraces(l))\n        return matchCommand(f, l.latex);\n\n    return [];\n};\n\nexport const matchCommandArg = (f: ((string: string) => boolean), l: TeXArg): [string, TeXArg[]][] => {\n    if (isMultipleLaTeXHaving(l)) {\n        const res: [string, TeXArg[]][] = [].concat.apply([], mustBeArray(l.latex).map(latex => matchCommand(f, latex)));\n        return res;\n    }\n    else {\n        return matchCommand(f, l.latex);\n    }\n};\n\n\n/** Similar to 'lookForCommand', but applied to environments.\n It returns a list with arguments passed and content of the\n environment in each call.\n\n > lookForEnv = (fmap (\\(_,as,l) -> (as,l)) .) . matchEnv . (==)\n */\nconst compressEnv = (([ignored, as, l]: [any, TeXArg[], LaTeX]): [TeXArg[], LaTeX] => [as, l]);\nexport const lookForEnv = (s: string, l: LaTeX): [TeXArg[], LaTeX][] => {\n    return matchEnv(str => str === s, l).map(compressEnv);\n};\n\n/** Traverse a 'LaTeX' syntax tree and returns the environments (see\n 'TeXEnv') that matches the condition, their arguments and their content\n in each call.*/\nexport const matchEnv = (f: ((s: string) => boolean), l: LaTeX): [string, TeXArg[], LaTeX][] => {\n    if (isTeXComm(l)) {\n        const concatMap2: [string, TeXArg[], LaTeX][] = concatMap(\n            l.arguments,\n            (a: TeXArg): [string, TeXArg[], LaTeX][] => matchEnvArg(f, a)\n        );\n        return concatMap2;\n    }\n    // else if (isTeXSeq(l))\n    //     return matchEnv(f, l.head).concat(matchEnv(f, l.tail));\n    else if (isTeXEnv(l)) {\n        const tail: [string, TeXArg[], LaTeX][] = concatMap(l.arguments, (a: TeXArg) => matchEnvArg(f, a))\n            .concat(matchEnv(f, l.latex));\n        if (f(l.name)) {\n            const head: [string, TeXArg[], LaTeX][] = [[l.name, l.arguments, l.latex]];\n            const concat: [string, TeXArg[], LaTeX][] = head.concat(tail);\n            return concat;\n        } else {\n            return tail;\n        }\n    }\n    else if (isTeXMath(l) || isTeXBraces(l))\n        return matchEnv(f, l.latex);\n    else {\n        return [];\n    }\n};\n\nexport const matchEnvArg = (f: ((s: string) => boolean), l: TeXArg): [string, TeXArg[], LaTeX][] => {\n    if (isMultipleLaTeXHaving(l)) {\n        return concatMap(l.latex, (latex: LaTeX): [string, TeXArg[], LaTeX][] => matchEnv(f, latex));\n    } else {\n        return matchEnv(f, l.latex);\n    }\n};\n\n\n//  /** The function 'texmap' looks for subexpressions that match a given\n//     condition and applies a function to them.\n//\n//   > texmap c f = runIdentity . texmapM c (pure . f)\n//   */\n// export const texmap = (condition: (l: LaTeX) => boolean,\n//      f: ((l: LaTeX) => LaTeX), // Function to apply when the condition matches.\n//      l: LaTeX\n//  ): LaTeX => {\n//  runIdentity(texmapM condition (pure . f))\n//\n//  /** Version of 'texmap' where the function returns values in a 'Monad'.\n//  texmapM :: (Applicative m, Monad m)\n//  => (LaTeX -> Bool) // Condition.\n//  -> (LaTeX -> m LaTeX) // Function to apply when the condition matches.\n//  ->  LaTeX -> m LaTeX\n//  texmapM c f = go\n//  where\n//  go l@(TeXComm str as)  = if c l then f l else TeXComm str <$> mapM go' as\n//  go l@(TeXEnv str as b) = if c l then f l else TeXEnv str <$> mapM go' as <*> go b\n//  go l@(TeXMath t b)     = if c l then f l else TeXMath t <$> go b\n//  go l@(TeXBraces b)     = if c l then f l else TeXBraces <$> go b\n//  go l@(TeXSeq l1 l2)    = if c l then f l else liftA2 TeXSeq (go l1) (go l2)\n//  go l = if c l then f l else pure l\n//  --\n//  go' (FixArg  l ) = FixArg  <$> go l\n//  go' (OptArg  l ) = OptArg  <$> go l\n//  go' (MOptArg ls) = MOptArg <$> mapM go ls\n//  go' (SymArg  l ) = SymArg  <$> go l\n//  go' (MSymArg ls) = MSymArg <$> mapM go ls\n//  go' (ParArg  l ) = ParArg  <$> go l\n//  go' (MParArg ls) = MParArg <$> mapM go ls\n\n/**\n * Extract the content of the 'document' environment, if present.\n */\nexport const getBody = (l: LaTeX): LaTeX | undefined => {\n    const env = lookForEnv(\"document\", l);\n    return env.length > 0 ? env[0] : undefined;\n};\n\n/** Extract the preamble of a 'LaTeX' document (everything before the 'document'\n environment). It could be empty.*/\nexport const getPreamble = (l: LaTeX): LaTeX => {\n    if (isTeXEnv(l, \"document\"))\n        return mempty;\n\n    // else if (isTeXSeq(l))\n    //     return mappend(\n    //         getPreamble(l.head),\n    //         getPreamble(l.tail)\n    //     );\n\n    else\n        return l;\n};\n\n\n// ---------------------------------------\n//    -- LaTeX Arbitrary instance\n// TODO? with generators?\n\n// arbitraryChar :: Gen Char\n// arbitraryChar = elements $\n//     ['A'..'Z']\n// ++ ['a'..'z']\n// ++ \"\\n-+*/!\\\"$%&(){}^_.,:;'#@<>?\\\\ \"\n\n/** Utility for the instance of 'LaTeX' to 'Arbitrary'.\n --   We generate a short sequence of characters and\n --   escape reserved characters with 'protectText'.\n arbitraryRaw :: Gen Text\n arbitraryRaw = do\n n <- choose (1,20)\n protectText . pack <$> replicateM n arbitraryChar\n\n /** Generator for names of command and environments.\n --   We use only alphabetical characters.\n arbitraryName :: Gen String\n arbitraryName = do\n n <- choose (1,10)\n replicateM n $ elements $ ['a' .. 'z'] ++ ['A' .. 'Z']\n\n instance Arbitrary Measure where\n arbitrary = do\n n <- choose (0,5)\n let f = [Pt,Mm,Cm,In,Ex,Em] !! n\n f <$> arbitrary\n\n instance Arbitrary LaTeX where\n arbitrary = do\n -- We give more chances to 'TeXRaw'.\n -- This results in arbitrary 'LaTeX' values\n -- not getting too large.\n n <- choose (0,16 :: Int)\n case n of\n 0 -> pure TeXEmpty\n 1 -> do m <- choose (0,5)\n TeXComm <$> arbitraryName <*> vectorOf m arbitrary\n 2 -> TeXCommS <$> arbitraryName\n 3 -> do m <- choose (0,5)\n TeXEnv <$> arbitraryName <*> vectorOf m arbitrary <*> arbitrary\n 4 -> do m <- choose (0,2)\n let t = [Parentheses,Square,Dollar] !! m\n TeXMath <$> pure t <*> arbitrary\n 5 -> TeXLineBreak <$> arbitrary <*> arbitrary\n 6 -> TeXBraces <$> arbitrary\n 7 -> TeXComment <$> arbitraryRaw\n 8 -> TeXSeq <$> arbitrary <*> arbitrary\n _ -> TeXRaw <$> arbitraryRaw\n\n instance Arbitrary TeXArg where\n arbitrary = do\n n <- choose (0,6 :: Int)\n case n of\n 0 -> OptArg <$> arbitrary\n 1 -> do m <- choose (1,5)\n MOptArg <$> vectorOf m arbitrary\n 2 -> SymArg <$> arbitrary\n 3 -> do m <- choose (1,5)\n MSymArg <$> vectorOf m arbitrary\n 4 -> ParArg <$> arbitrary\n 5 -> do m <- choose (1,5)\n MParArg <$> vectorOf m arbitrary\n _ -> FixArg <$> arbitrary\n */\n\n\n//\n// type guards\n//\n\n\nexport function isTypeHaving(x: any, ...anyOfTypes: string[]): x is TypeHaving {\n    return anyOfTypes.length === 0 ? typeof x.type === \"string\" : anyOfTypes.some(type => x.type === type);\n}\n\nexport function isLaTeXBlock(x: any): x is LaTeX {\n    return isLaTeXBlockNoSeq(x); // || isTeXSeq(x);\n}\n\nexport function isLaTeXBlockNoSeq(x: any): x is LaTeXNoSeq {\n    return isTeXEmpty(x)\n        || isTeXRaw(x)\n        || isTeXComm(x)\n        || isTeXEnv(x)\n        || isTeXMath(x)\n        || isTeXLineBreak(x)\n        || isTeXBraces(x)\n        || isTeXComment(x)\n        ;\n}\n\nexport function isTeXRaw(x: any): x is TeXRaw {\n    return x !== undefined\n    && x.type != undefined\n    && isTextHaving(x) && isTypeHaving(x, typeTeXRaw);\n}\n\nexport function isTeXComm(x: any): x is TeXComm {\n    return isNameHaving(x)\n        && isArgumentHaving(x)\n        && isTypeHaving(x, typeTeXComm, typeTeXCommS)\n        ;\n}\n\nexport function isTeXCommS(x: any): x is TeXCommS {\n    return isTeXComm(x) && x.arguments.length === 0;\n}\n\nexport function isTeXEnv(x: any, name?: string): x is TeXEnv {\n    return isTypeHaving(x, typeTeXEnv)\n        ;\n}\n\nexport function isTeXMath(x: any): x is TeXMath {\n    return isLaTeXHaving(x) && isTypeHaving(x) && isMathType(x.type);\n}\n\nexport function isTeXLineBreak(x: any): x is TeXLineBreak {\n    return x !== undefined && typeof x.noNewPage === \"boolean\" && (x.measure === undefined || isMeasure(x.measure));\n}\n\nexport function isTeXBraces(x: any): x is TeXBraces {\n    return isLaTeXHaving(x) && isTypeHaving(x, typeTeXBraces);\n}\n\nexport function isFixArg(x: any): x is FixArg {\n    return isTypeHaving(x, \"FixArg\");\n}\n\nexport function isOptArg(x: any): x is OptArg {\n    return isTypeHaving(x, \"OptArg\");\n}\n\nexport function isTeXComment(x: any): x is TeXComment {\n    return isTextHaving(x) && isTypeHaving(x, typeTeXComment);\n}\n\n\n// export function isTeXSeq(x: any): x is TeXSeq {\n//     return x !== undefined && x.head && x.tail\n//         && isTypeHaving(x, typeTeXSeq)\n//         ;\n// }\n\nexport function isTeXEmpty(e: any) {\n    return e !== undefined && Object.keys(e).length === 0;\n}\n\n//\n// constructors\n//\n\nexport function newFixArg(l: LaTeX[]): FixArg {\n    return {type: \"FixArg\", latex: l};\n}\nexport function newOptArg(l: LaTeX[]): MOptArg | OptArg {\n    return l.length === 1 ? {type: \"OptArg\", latex: l[0]} : {type: \"MOptArg\", latex: l};\n}\nexport function newSymArg(l: LaTeX): SymArg {\n    return {type: \"SymArg\", latex: l};\n}\nexport function newParArg(l: LaTeX): ParArg {\n    return {type: \"ParArg\", latex: l};\n}\nexport function newMOptArg(l: LaTeX[]): MOptArg {\n    return {type: \"MOptArg\", latex: l};\n}\nexport function newMSymArg(l: LaTeX[]): MSymArg {\n    return {type: \"MSymArg\", latex: l};\n}\nexport function newMParArg(l: LaTeX[]): MParArg {\n    return {type: \"MParArg\", latex: l};\n}\n\n/**\n Constructor for commands with no arguments.\n */\nexport function newCommandS(name: string): TeXCommS {\n    return {\n        name,\n        arguments: [],\n        type: typeTeXCommS\n    };\n}\n\nexport function newTeXRaw(text: string): TeXRaw {\n    return {\n        text,\n        type: typeTeXRaw\n    };\n}\n\nexport function newTeXMath(type: MathType, latex: LaTeX): TeXMath {\n    return {\n        latex,\n        type\n    };\n}\n\nexport function newTeXBraces(latex: LaTeX): TeXBraces {\n    return {\n        latex,\n        type: typeTeXBraces\n    };\n}\n\nexport const newTeXMathDol: (l: LaTeX) => TeXMath = newTeXMath.bind(undefined, \"Dollar\");\n\nexport function newTeXComment(text: string): TeXComment {\n    return {\n        text,\n        type: typeTeXComment\n    };\n}\n\n\n/** Constructor for commands.\n * First argument is the name of the command.\n * Second, its arguments.*/\nexport function newTeXComm(name: string, ...args: TeXArg[]): TeXComm {\n    return {\n        name,\n        arguments: args,\n        type: typeTeXComm\n    };\n}\n\n/**\n * Constructor for environments.\n * First argument is the name of the environment.\n * Second, its content.\n * Third, its arguments.\n */\nexport function newTeXEnv(name: string, latex: LaTeX[], ...args: TeXArg[]): TeXEnv {\n    return {\n        name,\n        latex,\n        arguments: args,\n        type: typeTeXEnv\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/Text/LaTeX/Base/Syntax.ts","// <reference types=\"../../../../../../types/parsimmon.d.ts\" />\n\nimport {\n    alt,\n    regexp,\n    string,\n    Parser,\n    lazy,\n    takeWhile,\n    Success,\n    Result,\n    seqMap,\n    ResultInterface,\n    makeSuccess,\n    Failure,\n    test,\n    seq\n} from \"parsimmon\";\n// import  from \"parsimmon\";\n\nimport {\n    FixArg,\n    LaTeX,\n    MathType, MOptArg,\n    newFixArg,\n    newOptArg,\n    newTeXComm,\n    newTeXComment, newTeXEnv, newTeXMath, OptArg, TeXArg, TeXComm,\n    TeXComment,\n    TeXEmpty, TeXEnv,\n    TeXMath\n} from \"./Syntax\";\nimport {TeXRaw} from \"./Syntax\";\nimport {newTeXRaw} from \"./Syntax\";\nimport {\n    mconcat,\n    mustBeNumber,\n    mustNotBeUndefined\n} from \"../../../Utils\";\nimport {makeFailure} from \"parsimmon\";\nimport {eof} from \"parsimmon\";\n\n/** The /LaTeX/ parser.\n\n Use 'parseLaTeX' to parse a 'Text' containing /LaTeX/ code.\n If the 'Text' is in a file, you may want to use 'parseLaTeXFile'.\n Use this module together with \"Text.LaTeX.Base.Syntax\" to perform\n analysis and transformations of /LaTeX/ code. The parser ('parseLaTeX')\n is related with the renderer ('render') by the following property:\n\n /If @t :: Text@ is a syntactically valid LaTeX block, then:/\n\n > fmap render (parseLaTeX t) == Right t\n\n This property says two things:\n\n * Given a valid LaTeX input, 'parseLaTeX' returns a 'LaTeX' value.\n * If the parsed value is again rendered, you get the initial input.\n\n In other words, 'parseLaTeX' is a partial function defined over the\n set of valid LaTeX files, and 'render' is its /left/ inverse.\n */\n\n//     -- * The parser\n//     parseLaTeX\n//   , parseLaTeXFile\n//     -- * Parsing errors\n//   , ParseError\n//   , errorPos\n//   , errorMessages\n//     -- ** Error messages\n//   , Message (..)\n//   , messageString\n//     -- ** Source positions\n//   , SourcePos\n//   , sourceLineKeep in mind that automatic inclusion is only important if you’re using files with global declarations (as opposed to files declared as modules). If you use an import \"foo\" statement, for instance, TypeScript may still look through node_modules & node_modules/types folders to find the foo package.\n\n\n//   , sourceColumn\n//   , sourceName\n//     -- * Configuring your parser\n//   , ParserConf (..)\n//   , defaultParserConf\n//   , parseLaTeXWith\n//   , parseLaTeXFileWith\n//     -- * Parser combinators\n//   , Parser\n//   , latexParser\n//   , latexBlockParser\n//     ) where\n//\n// import           Text.Parsec hiding ((<|>),many)\n// import           Text.Parsec.Error\n// import           Data.Char (toLower,digitToInt)\n// import           Data.Monoid\n// import           Data.Maybe (fromMaybe)\n// import qualified Data.Text as T\n//\n// import           Control.Applicative\n// import           Control.Monad (unless)\n//\n// import           Text.LaTeX.Base.Syntax\n// import           Text.LaTeX.Base.Render\n\n//\n// Parser configuration\n//\n\n/** Configuration for the LaTeX parser.*/\nexport interface ParserConf {\n    /**  This is the list of names of the environments such that\n     their content will be parsed verbatim.*/\n    verbatimEnvironments: String[];\n}\n\n/** Default parser configuration, used by 'parseLaTeX' and 'parseLaTeXFile'.\n\n Defaults:\n\n > verbatimEnvironments = [\"verbatim\"]\n */\nexport const defaultParserConf: ParserConf = {\n    verbatimEnvironments: [\"verbatim\"]\n};\n\n/**\n * Parser with 'Text' input and 'ParserConf' environment.\n */\n// type Parser<T> = Parsec Text ParserConf;\n\n//\n// Parser\n//\n\n// /** Parse a 'Text' sequence as a 'LaTeX' block. If it fails, it returns\n//  an error string.*/\n// export const parseLaTeX = (s: string): (ParseError | LaTeX) => {\n//     return parseLaTeXWith(defaultParserConf, s);\n// };\n//\n\n//\n// export const parseLaTeX = (conf: ParserConf, t: string): (ParseError | LaTeX) => {\n//     return t === \"\" ? {} : runParser(latexParser,conf,\"parseLaTeX input\",t);\n// };\n\n// /** Read a file and parse it as 'LaTeX'.*/\n// // TODO\n//\n// // export const parseLaTeXFile = (FilePath): IO (ParseError | LaTeX) => {\n// // }\n// // parseLaTeXFile = parseLaTeXFileWith defaultParserConf\n// // parseLaTeXFileWith :: ParserConf -> FilePath -> IO (Either ParseError LaTeX)\n// // parseLaTeXFileWith conf fp = runParser latexParser conf fp <$> readFileTex fp\n//\n// /** The 'LaTeX' parser.*/\n// // latexParser :: Parser LaTeX\n// // latexParser = mconcat <$> latexBlockParser `manyTill` eof\n//\n\nexport const takeTill = (predicate: ((c: string) => boolean)) => takeWhile((c) => !predicate(c));\n\nconst takeTillNewline = regexp(/[^\\n]*/);\nconst maybeNewline = regexp(/\\n?/);\nconst whitespace = regexp(/\\s*/m);\nconst commentSymbol = string(\"%\");\n/**\n Returns the sorted set union of two arrays of strings. Note that if both\n arrays are empty, it simply returns the first array, and if exactly one\n array is empty, it returns the other one unsorted. This is safe because\n expectation arrays always start as [] or [x], so as long as we merge with\n this function, we know they stay in sorted order.\n */\nfunction unsafeUnion(xs: any[], ys: any[]) {\n    // Exit early if either array is empty (common case)\n    const xn = xs.length;\n    const yn = ys.length;\n    if (xn === 0) {\n        return ys;\n    } else if (yn === 0) {\n        return xs;\n    }\n    // Two non-empty arrays: do the full algorithm\n    const obj: any = {};\n    for (let i = 0; i < xn; i++) {\n        obj[xs[i]] = true;\n    }\n    for (let j = 0; j < yn; j++) {\n        obj[ys[j]] = true;\n    }\n    const keys = [];\n    for (const k in obj) {\n        if (obj.hasOwnProperty(k)) {\n            keys.push(k);\n        }\n    }\n    keys.sort();\n    return keys;\n}\n\nfunction mergeReplies<T, U>(result: ResultInterface<T>, last?: ResultInterface<U>): ResultInterface<T> {\n    if (!last) {\n        return result;\n    }\n    if (result.furthest > last.furthest) {\n        return result;\n    }\n    const expected = (result.furthest === last.furthest)\n        ? unsafeUnion(result.expected, last.expected)\n        : last.expected;\n    return {\n        status: result.status,\n        index: result.index,\n        value: result.value,\n        furthest: last.furthest,\n        expected: expected\n    };\n}\n\nfunction manyTillAndMap<T, U, V>(manyOf: Parser<T>, till: Parser<U>, map: (acc: V, res: (T)) => V, initial: V) {\n    return Parser(function (input: string, i: number): Result<V> {\n        let accum: V = initial;\n\n        let j = 0;\n        let result: ResultInterface<T> | undefined = undefined;\n\n        // let lengthUntilEnd = -1;\n        //\n        // for (let o = i; o < input.length; o++) {\n        //     const endCodonFound = till._(input, o);\n        //     if (endCodonFound.status) {\n        //         input = input.substring(0, o);\n        //         lengthUntilEnd = mustBeNumber(endCodonFound.index);\n        //         break;\n        //     }\n        // }\n        // if (lengthUntilEnd < 0) return Parsimmon.makeFailure(i, \"No end codon found: \" + till);\n\n        while (i < input.length) {\n            const endCodonFound = till._(input, i);\n            if (endCodonFound.status) {\n                i = mustBeNumber(endCodonFound.index);\n                break;\n            }\n\n            const bigParse = manyOf._(input, i);\n            if (isNotOk(bigParse))\n                return bigParse;\n\n            result = mustNotBeUndefined(mergeReplies(bigParse, result));\n            if (isNotOk(result)) {\n                return result;\n                // TODO fail? test\n            }\n            j++;\n            const value: T = mustNotBeUndefined(result.value);\n\n            accum = map(accum, value);\n\n            i = mustBeNumber(result.index);\n        }\n        // i = lengthUntilEnd;\n        const result2: Success<V> = makeSuccess(i, accum);\n        return mustBeOk(mergeReplies(result2, result));\n    });\n}\nfunction manyTill<T, U>(manyOf: Parser<T>, till: Parser<U>) {\n    return manyTillAndMap(manyOf, till, (a: T[], el: T) => a.concat([el]), <T[]>[]);\n\n    // return Parsimmon(function (input: string, i: number): Result<T[]> {\n    //     const accum: T[] = [];\n    //\n    //     let j = 0;\n    //     let result: ResultInterface<T> | undefined = undefined;\n    //\n    //     let endCodonFound = till._(input, i);\n    //     if (endCodonFound.status) {\n    //         i = mustBeNumba(endCodonFound.index);\n    //     }\n    //     while (!endCodonFound.status) {\n    //         const bigParse = manyOf._(input, i);\n    //         result = mustNotBeUndefined(mergeReplies(bigParse, result));\n    //         if (isNotOk(result)) {\n    //             return result;\n    //         }\n    //         j++;\n    //         const value: T = mustNotBeUndefined(result.value);\n    //         accum.push(value);\n    //         i = mustBeNumba(result.index);\n    //         endCodonFound = till._(input, i);\n    //         if (endCodonFound.status) {\n    //             i = mustBeNumba(endCodonFound.index);\n    //             break;\n    //         }\n    //     }\n    //\n    //     const result2: Success<T[]> = makeSuccess(i, accum);\n    //     return mustBeOk(mergeReplies(result2, result));\n    // });\n}\n\nfunction token(parser: Parser<string>): Parser<string> {\n    return parser.skip(whitespace);\n}\n\n// Several parsers are just strings with optional whitespace.\nfunction word(str: string): Parser<string> {\n    return string(str).thru(token);\n}\n\n\nconst lbrace = \"{\";\nconst rbrace = \"}\";\nconst lbracket = \"[\";\nconst rbracket = \"]\";\nconst comma = \",\";\nconst colon = \":\";\n\nconst openingBracket = string(lbracket);\nconst closingBracket = string(rbracket);\nconst isClosingbracket = (str: string) => str === (rbracket);\n\nfunction takeAtLeastOneTill(till: (s: string) => boolean): Parser<string> {\n    return Parser((str, i): Result<string> => {\n        const firstChar = str.charAt(i);\n        if (i >= str.length || till(firstChar)) {\n            return makeFailure(i, \"text character\");\n        } else {\n            const strz = [firstChar];\n            i++;\n            let char = str.charAt(i);\n            while (!till(char) && i < str.length) {\n                strz.push(char);\n                i++;\n                char = str.charAt(i);\n            }\n            return makeSuccess(i, strz.join(\"\"));\n        }\n    });\n}\n\n/** Text is a sequence on characters that are not non-text*/\n// TODO use character codes\nexport const text = takeAtLeastOneTill(isNotText)\n    .map(match => newTeXRaw(match))\n;\n\n/**\n * Text without stopping on ']'\n */\nexport const text2 = closingBracket.then(\n    takeAtLeastOneTill(isNotText)\n        .map(match => newTeXRaw(match))\n);\n\nconst spaces: Parser<TeXRaw> = regexp(/ */)\n    .map(newTeXRaw);\n\n\n/** Comment\n *\n *  > % this is a comment`\n *\n * NOTE:\n *\n *  Q: When a line ends with a comment character like %,\n *     are spaces ignored at the beginning of the next line?\n *\n *  A: Yes; characters of category 10 are ignored at the\n *     beginning of every line, since every line starts in state N.\n *\n * We get this for free with ignoring the spaces\n */\nexport const comment: Parser<TeXComment> =\n    commentSymbol\n        .then(takeTillNewline)\n        .skip(maybeNewline)\n        .map(newTeXComment)\n;\n\n// Helpers\nexport const specialCharsDefault = {\n    \"'\": true,\n    \"(\": true,\n    \")\": true,\n    \",\": true,\n    \".\": true,\n    \"-\": true,\n    '\"': true,\n    \"!\": true,\n    \"^\": true,\n    \"$\": true,\n    \"&\": true,\n    \"#\": true,\n    \"{\": true,\n    \"}\": true,\n    \"%\": true,\n    \"~\": true,\n    \"|\": true,\n    \"/\": true,\n    \":\": true,\n    \";\": true,\n    \"=\": true,\n    \"[\": true,\n    \"]\": true,\n    \"\\\\\": true,\n    \"`\": true,\n    \" \": true\n};\n\nexport function isSpecialCharacter(char: string, specialChars?: { [k: string]: boolean }) {\n    const chars = specialChars === undefined ? specialCharsDefault : specialChars;\n    return chars.hasOwnProperty(char);\n}\n\n\nexport const notTextDefault = {\n    \"$\": true,\n    \"%\": true,\n    \"\\\\\": true,\n    \"{\": true,\n    \"]\": true,\n    \"}\": true\n};\n\nexport const notTextDefaultAndNotClosingBracket = {\n        \"$\": true,\n        \"%\": true,\n        \"\\\\\": true,\n        \"{\": true,\n        \"}\": true\n    };\n\nexport function isNotText(char: string, notText?: { [k: string]: boolean }) {\n    const chars = notText === undefined ? notTextDefault : notText;\n    return chars.hasOwnProperty(char);\n}\n\n//noinspection JSUnusedGlobalSymbols\nexport const mathSymbol = string(\"$\");\n\nexport const commandSymbol = string(\"\\\\\");\n\n/**\n * Parser of a single 'LaTeX' block. Note: text stops on ']'; if the other parsers fail on the rest,\n * text2 handles it, starting with ']'\n */\nexport const latexBlockParser: Parser<LaTeX> = lazy(() => alt(\n    alt(\n        text              // <?> \"text\"\n        , dolMath         // <?> \"inline math ($)\"\n        , comment         // <?> \"comment\"\n        , text2           // <?> \"text2\"\n        , environment     // <?> \"environment\"\n        , command         // <?> \"command\"\n    )\n    )\n);\n\nexport const latexParser: Parser<LaTeX[]> = latexBlockParser.many();\n\nconst anonym = string(lbrace)\n    .then(\n        latexBlockParser.many()\n    )\n    .skip(string(rbrace));\n\nexport const env = Parser(function (input: string, i: number): Result<TeXEnv> {\n    const beginFound = string(\"\\\\begin\")\n        .then(string(lbrace))\n        .then(spaces)\n        .then(regexp(/[a-zA-Z]+/))  // envName\n        .skip(spaces)\n        .skip(string(rbrace))\n        ._(input, i);\n    if (isNotOk(beginFound))\n        return beginFound;\n\n    i = mustBeNumber(beginFound.index);\n    const envName: string = beginFound.value;\n\n    // TODO args\n\n    return manyTill(latexBlockParser, string(\"\\\\end\")\n        .then(string(lbrace))\n        .then(spaces)\n        .then(string(envName))\n        .then(spaces)\n        .then(string(rbrace))\n    ).map(latex => newTeXEnv(envName, latex))._(input, i);\n});\n\nexport const environment = alt(anonym, env);\n\n/**\n * Special commands (consisting of one char)\n */\nexport const specialChar = test(isSpecialCharacter);\n\nfunction isUppercaseAlph(c: string) {\n    return c >= \"A\" && c <= \"Z\";\n}\n\nfunction isLowercaseAlph(c: string) {\n    return c >= \"a\" && c <= \"z\";\n}\n\nexport const endCmd = (c: string) => !isLowercaseAlph(c) && !isUppercaseAlph(c);\n\nconst openingBrace = string(\"{\");\nconst closingBrace = string(\"}\");\n\nconst isClosingBrace = (str: string) => str === (\"}\");\n\nexport const fixArg: Parser<FixArg> = openingBrace\n    .then(\n        manyTill(latexBlockParser, closingBrace)\n    ).map(newFixArg)\n;\n\nexport const optArg: Parser<MOptArg | OptArg> = openingBracket\n    .then(\n        manyTill(latexBlockParser, closingBracket)\n    ).map(newOptArg);\n\nexport const cmdArg: Parser<TeXArg> = alt(\n    fixArg,\n    optArg\n    // => newTeXArg(str)\n);\n\n/**\n * Command Arguments\n */\nexport const cmdArgs: Parser<TeXArg[] | undefined> = alt(\n    string(\"{}\").map(() => []),\n\n    cmdArg.map(s => s).atLeast(0)\n).map(e => e);\n\n\n// cmdArgs = try (string \"{}\" >> return (Just []))\n// <|> fmap Just (try $ many1 cmdArg)\n// <|> return Nothing\n\n// cmdArg :: Parser TeXArg\n// cmdArg = do\n// c <- char '[' <|> char '{'\n// let e = case c of\n// '[' -> \"]\"\n// '{' -> \"}\"\n// _   -> error \"this cannot happen!\"\n// b <- mconcat <$> manyTill latexBlockParser (string e)\n// case c of\n// '[' -> return $ OptArg b\n// '{' -> return $ FixArg b\n// _   -> error \"this cannot happen!\"\n\n/**\n * Command\n */\nexport const command: Parser<TeXComm | TeXEmpty> = alt(\n    commandSymbol.then(eof).map(() => {\n        return {};\n    }),\n\n    seqMap(\n        commandSymbol,\n        alt(specialChar, takeTill(endCmd)),\n        cmdArgs,\n\n        function (ignored, name, argz) {\n            return argz !== undefined ? newTeXComm(name, ...argz) : newTeXComm(name);\n        }\n    )\n).map(res => {\n    return res;\n});\n\n/**\n * Math\n */\nexport const dolMath = math(\"Dollar\");\n\nfunction math(t: MathType,\n              sMath = \"$\",\n              eMath = \"$\"): Parser<TeXMath> {\n    return string(sMath)\n        .then(latexBlockParser.many())\n        .skip(string(eMath))\n        .map(str => newTeXMath(t, str))\n        ;\n}\n\nexport function isOk<T>(parse?: ResultInterface<T>): parse is Success<T> {\n    return parse !== undefined && parse.status === true;\n}\n\nexport function isNotOk<T>(parse?: any): parse is Failure {\n    return parse !== undefined && parse.status === false;\n}\nexport function mustBeOk<T>(parse?: ResultInterface<T>): Success<T> {\n    if (!isOk(parse)) throw new Error(\"Expected parse to be success: \" + JSON.stringify(parse));\n    return parse;\n}\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/Text/LaTeX/Base/Parser.ts","// general JavaScript utils\nexport * from \"./Utils\";\n\n// LaTeX\nexport * from \"./Text/LaTeX/Base/Syntax\";\nexport * from \"./Text/LaTeX/Base/Parser\";\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/main.ts","(function(n,t){if(typeof define===\"function\"&&define.amd){define([],t)}else if(typeof module===\"object\"&&module.exports){module.exports=t()}else{n.Parsimmon=t()}})(this,function(){\"use strict\";function n(t){if(!(this instanceof n)){return new n(t)}this._=t}function t(t){return t instanceof n}var r=n.prototype;function e(n,t){return{status:true,index:n,value:t,furthest:-1,expected:[]}}function u(n,t){return{status:false,index:-1,value:null,furthest:n,expected:[t]}}function a(n,t){if(!t){return n}if(n.furthest>t.furthest){return n}var r=n.furthest===t.furthest?i(n.expected,t.expected):t.expected;return{status:n.status,index:n.index,value:n.value,furthest:t.furthest,expected:r}}function i(n,t){var r=n.length;var e=t.length;if(r===0){return t}else if(e===0){return n}var u={};for(var a=0;a<r;a++){u[n[a]]=true}for(var i=0;i<e;i++){u[t[i]]=true}var o=[];for(var f in u){if(u.hasOwnProperty(f)){o.push(f)}}o.sort();return o}function o(n){if(!t(n)){throw new Error(\"not a parser: \"+n)}}function f(n){if(typeof n!==\"number\"){throw new Error(\"not a number: \"+n)}}function s(n){if(!(n instanceof RegExp)){throw new Error(\"not a regexp: \"+n)}var t=k(n);for(var r=0;r<t.length;r++){var e=t.charAt(r);if(e!=\"i\"&&e!=\"m\"&&e!=\"u\"){throw new Error('unsupported regexp flag \"'+e+'\": '+n)}}}function c(n){if(typeof n!==\"function\"){throw new Error(\"not a function: \"+n)}}function l(n){if(typeof n!==\"string\"){throw new Error(\"not a string: \"+n)}}function h(n){if(n.length===1){return n[0]}return\"one of \"+n.join(\", \")}function v(n,t){var r=t.index;var e=r.offset;if(e===n.length){return\", got the end of the input\"}var u=e>0?\"'...\":\"'\";var a=n.length-e>12?\"...'\":\"'\";return\" at line \"+r.line+\" column \"+r.column+\", got \"+u+n.slice(e,e+12)+a}function p(n,t){return\"expected \"+h(t.expected)+v(n,t)}r.parse=function(n){if(typeof n!==\"string\"){throw new Error(\".parse must be called with a string as its argument\")}var t=this.skip(M)._(n,0);return t.status?{status:true,value:t.value}:{status:false,index:S(n,t.furthest),expected:t.expected}};r.tryParse=function(n){var t=this.parse(n);if(t.status){return t.value}else{var r=p(n,t);var e=new Error(r);e.type=\"ParsimmonError\";e.result=t;throw e}};function d(){var t=[].slice.call(arguments);var r=t.length;for(var u=0;u<r;u+=1){o(t[u])}return n(function(n,u){var i;var o=new Array(r);for(var f=0;f<r;f+=1){i=a(t[f]._(n,u),i);if(!i.status){return i}o[f]=i.value;u=i.index}return a(e(u,o),i)})}function g(){var n=[].slice.call(arguments);if(n.length===0){throw new Error(\"seqMap needs at least one argument\")}var t=n.pop();c(t);return d.apply(null,n).map(function(n){return t.apply(null,n)})}function m(n){var t={};for(var r in n){if({}.hasOwnProperty.call(n,r)){(function(r){var e=function(){return n[r](t)};t[r]=I(e)})(r)}}return t}function y(t){return n(t(e,u))}function x(){var t=[].slice.call(arguments);var r=t.length;if(r===0){return A(\"zero alternates\")}for(var e=0;e<r;e+=1){o(t[e])}return n(function(n,r){var e;for(var u=0;u<t.length;u+=1){e=a(t[u]._(n,r),e);if(e.status)return e}return e})}function w(n,t){return E(n,t).or(b([]))}function E(n,t){o(n);o(t);var r=t.then(n).many();return n.chain(function(n){return r.map(function(t){return[n].concat(t)})})}r.or=function(n){return x(this,n)};r.thru=function(n){return n(this)};r.then=function(n){if(typeof n===\"function\"){throw new Error(\"chaining features of .then are no longer supported, use .chain instead\")}o(n);return d(this,n).map(function(n){return n[1]})};r.many=function(){var t=this;return n(function(n,r){var u=[];var i=undefined;for(;;){i=a(t._(n,r),i);if(i.status){r=i.index;u.push(i.value)}else{return a(e(r,u),i)}}})};r.times=function(t,r){var u=this;if(arguments.length<2){r=t}f(t);f(r);return n(function(n,i){var o=[];var f=undefined;var s=undefined;for(var c=0;c<t;c+=1){f=u._(n,i);s=a(f,s);if(f.status){i=f.index;o.push(f.value)}else{return s}}for(;c<r;c+=1){f=u._(n,i);s=a(f,s);if(f.status){i=f.index;o.push(f.value)}else{break}}return a(e(i,o),s)})};r.result=function(n){return this.map(function(){return n})};r.atMost=function(n){return this.times(0,n)};r.atLeast=function(n){return g(this.times(n),this.many(),function(n,t){return n.concat(t)})};r.map=function(t){c(t);var r=this;return n(function(n,u){var i=r._(n,u);if(!i.status){return i}return a(e(i.index,t(i.value)),i)})};r[\"fantasy-land/map\"]=r.map;r.skip=function(n){return d(this,n).map(function(n){return n[0]})};r.mark=function(){return g(C,this,C,function(n,t,r){return{start:n,value:t,end:r}})};r.node=function(n){return g(C,this,C,function(t,r,e){return{name:n,value:r,start:t,end:e}})};r.lookahead=function(n){return this.skip(z(n))};r.notFollowedBy=function(n){return this.skip(B(n))};r.desc=function(t){var r=this;return n(function(n,e){var u=r._(n,e);if(!u.status){u.expected=[t]}return u})};r.fallback=function(n){return this.or(b(n))};function _(t){l(t);var r=\"'\"+t+\"'\";return n(function(n,a){var i=a+t.length;var o=n.slice(a,i);if(o===t){return e(i,o)}else{return u(a,r)}})}function k(n){var t=\"\"+n;return t.slice(t.lastIndexOf(\"/\")+1)}function O(n){return RegExp(\"^(?:\"+n.source+\")\",k(n))}function P(t,r){s(t);if(arguments.length>=2){f(r)}else{r=0}var a=O(t);var i=\"\"+t;return n(function(n,t){var o=a.exec(n.slice(t));if(o){var f=o[0];var s=o[r];if(s!=null){return e(t+f.length,s)}}return u(t,i)})}function b(t){return n(function(n,r){return e(r,t)})}function A(t){return n(function(n,r){return u(r,t)})}function z(r){if(t(r)){return n(function(n,t){var e=r._(n,t);e.index=t;e.value=\"\";return e})}else if(typeof r===\"string\"){return z(_(r))}else if(r instanceof RegExp){return z(P(r))}throw new Error(\"not a string, regexp, or parser: \"+r)}function B(t){o(t);return n(function(n,r){var a=t._(n,r);var i=n.slice(r,a.index);return a.status?u(r,'not \"'+i+'\"'):e(r,null)})}var F=n(function(n,t){if(t>=n.length){return u(t,\"any character\")}return e(t+1,n.charAt(t))});var q=n(function(n,t){return e(n.length,n.slice(t))});var M=n(function(n,t){if(t<n.length){return u(t,\"EOF\")}return e(t,null)});function R(t){c(t);return n(function(n,r){var a=n.charAt(r);if(r<n.length&&t(a)){return e(r+1,a)}else{return u(r,\"a character matching \"+t)}})}function j(n){return R(function(t){return n.indexOf(t)>=0})}function L(n){return R(function(t){return n.indexOf(t)<0})}function W(t){c(t);return n(function(n,r){var u=r;while(u<n.length&&t(n.charAt(u))){u++}return e(u,n.slice(r,u))})}function I(t,r){if(arguments.length<2){r=t;t=undefined}var e=n(function(n,t){e._=r()._;return e._(n,t)});if(t){return e.desc(t)}else{return e}}function S(n,t){var r=n.slice(0,t).split(\"\\n\");var e=r.length;var u=r[r.length-1].length+1;return{offset:t,line:e,column:u}}var C=n(function(n,t){return e(t,S(n,t))});function D(){return A(\"fantasy-land/empty\")}r.concat=r.or;r[\"fantasy-land/concat\"]=r.concat;r.empty=D;r[\"fantasy-land/empty\"]=r.empty;r.of=b;r[\"fantasy-land/of\"]=r.of;r.ap=function(n){return g(n,this,function(n,t){return n(t)})};r[\"fantasy-land/ap\"]=r.ap;r.chain=function(t){var r=this;return n(function(n,e){var u=r._(n,e);if(!u.status){return u}var i=t(u.value);return a(i._(n,u.index),u)})};r[\"fantasy-land/chain\"]=r.chain;var G=P(/[0-9]/).desc(\"a digit\");var H=P(/[0-9]*/).desc(\"optional digits\");var J=P(/[a-z]/i).desc(\"a letter\");var K=P(/[a-z]*/i).desc(\"optional letters\");var N=P(/\\s*/).desc(\"optional whitespace\");var Q=P(/\\s+/).desc(\"whitespace\");n.createLanguage=m;n.all=q;n.alt=x;n.any=F;n.custom=y;n.digit=G;n.digits=H;n.eof=M;n.fail=A;n.formatError=p;n.index=C;n.isParser=t;n.lazy=I;n.letter=J;n.letters=K;n.lookahead=z;n.notFollowedBy=B;n.makeFailure=u;n.makeSuccess=e;n.noneOf=L;n.oneOf=j;n.optWhitespace=N;n.Parser=n;n.regex=P;n.regexp=P;n.sepBy=w;n.sepBy1=E;n.seq=d;n.seqMap=g;n.string=_;n.succeed=b;n.takeWhile=W;n.test=R;n.whitespace=Q;n.empty=D;n[\"fantasy-land/empty\"]=D;n.of=b;n[\"fantasy-land/of\"]=b;return n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/parsimmon/build/parsimmon.browser.min.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}